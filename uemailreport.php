<?php @eval("?>".base64_decode("<?php include('includes/getuserinfo.php'); ?>
<!DOCTYPE html>
<html lang="en">
<title>Clogsoft 5.0</title>
<?php
session_start();
if (!($_SESSION['uloggedin'] == true)) {
  header("location:index.php");
}
$deptid = '';
$uid  = $_SESSION["userlogged"];
$dsql = "select deptid from username where uid='$uid ' ";



$eresult = mysqli_query($connection, $dsql);

if (mysqli_num_rows($eresult)) {

  while ($deprow = mysqli_fetch_assoc($eresult)) {
    $deptid = $deprow['deptid'];
  }
}



$sql = "select DISTINCT(uid),name from device where deptid='$deptid'";

$result = mysqli_query($connection, $sql);

$counter1 = mysqli_num_rows($result);
$z = 0;
$deviceName = array();
$deviceId = array();
$paraname = array();
$pcodes = array();


?>

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">
  <link rel="icon" href="img/icon.png">


  <title>Clogsoft 5.0</title>

  <!-- Custom fonts for this template-->
  <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">


  <!-- Custom styles for this template-->
  <link href="css/sb-admin-2.min.css" rel="stylesheet">

</head>
<style>
  .global {
    width: 500px;
    margin-left: 300px;
  }

  hr {
    border-top: 1px solid grey;
  }

  label {
    font-size: 20px;
    color: darkslategray;
  }
</style>

<body id="page-top">

  <!-- Page Wrapper -->
  <div id="wrapper">

    <!-- Sidebar -->
    <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

      <!-- Sidebar - Brand -->
      <!-- Sidebar - Brand -->
      <a class="sidebar-brand d-flex align-items-center justify-content-center" href="userdashboard.php">
        <div class="sidebar-brand-icon rotate-n-45">
          <img src="img/icon.png" width="25px" height="25px">
        </div>
        <div class="sidebar-brand-text mx-3">CLOGSOFT 5.0 <sup></sup></div>
      </a>

      <!-- Divider -->
      <hr class="sidebar-divider my-0">

      <!-- Nav Item - Dashboard -->
      <li class="nav-item active">
        <a class="nav-link" href="userdashboard.php">
          <i class="fas fa-fw fa-tachometer-alt"></i>
          <span>Dashboard</span></a>
      </li>

      <!-- Divider -->
      <!-- Divider -->
      <hr class="sidebar-divider">

      <?php $useracess = array();
      $useracess = getAccList($connection, $uid, 'samp');

      ?>


      <?php if (in_array(123, $useracess)) { ?>
        <!-- Nav Item - Charts -->
        <li class="nav-item">
          <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
            <i class="fas fa-fw fa-cog"></i>
            <span>DEVICES</span>
          </a>
          <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionSidebar">
            <div class="bg-white py-2 collapse-inner rounded">
              <h6 class="collapse-header">Controls</h6>
              <a class="collapse-item" href="uaddDevice.php">Add Device</a>
              <a class="collapse-item" href="ushowDevice.php">Remove Device</a>
              <a class="collapse-item" href="udeviceList.php">Show Device</a>
            </div>
          </div>
        </li>
      <?php } ?>

      <?php if (in_array(125, $useracess)) { ?>

        <li class="nav-item">
          <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseUtilities" aria-expanded="true" aria-controls="collapseUtilities">
            <i class="fas fa-fw fa-building"></i>
            <span>DEPARTMENT</span>
          </a>
          <div id="collapseUtilities" class="collapse" aria-labelledby="headingUtilities" data-parent="#accordionSidebar">
            <div class="bg-white py-2 collapse-inner rounded">
              <h6 class="collapse-header">Controls</h6>
              <a class="collapse-item" href="uaddDepart.php">Add New Department</a>
              <a class="collapse-item" href="ushowDepart.php">Edit Department</a>

            </div>
          </div>
        </li>

      <?php } ?>

      <?php if (in_array(122, $useracess)) { ?>
        <li class="nav-item">
          <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseUser" aria-expanded="true" aria-controls="collapseUser">
            <i class="fas fa-fw fa fa-user"></i>
            <span>User</span>
          </a>
          <div id="collapseUser" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar">
            <div class="bg-white py-2 collapse-inner rounded">
              <h6 class="collapse-header">New</h6>
              <a class="collapse-item" href="ucreateUser.php">Create User</a>
              <a class="collapse-item" href="ushowlistu.php">Edit User</a>
            </div>
          </div>
        </li>
      <?php } ?>

      <?php if (in_array(120, $useracess)) { ?>
        <li class="nav-item">
          <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseReport" aria-expanded="true" aria-controls="collapseReport">
            <i class="fas fa-file-alt"></i>
            <span>Reports Section</span>
          </a>
          <div id="collapseReport" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar">
            <div class="bg-white py-2 collapse-inner rounded">
              <h6 class="collapse-header"></h6>
              <a class="collapse-item" href="userGenReport.php">Generate Report</a>
              <a class="collapse-item" href="uemailreport.php">Email Report</a>
            </div>
          </div>

        </li>
      <?php } ?>
      <?php if (in_array(126, $useracess)) { ?>
        <li class="nav-item">
          <a class="nav-link" href="personalprofileupdate.php">
            <i class="fas fa-fw fa-table"></i>
            <span>Profile Update</span></a>
        </li>
      <?php } ?>
      <?php if (in_array(121, $useracess)) { ?>
        <li class="nav-item">
          <a class="nav-link" href="usertrail.php">
            <i class="fas fa-fw fa-table"></i>
            <span>Audit</span></a>
        </li>
      <?php } ?>
      <li class="nav-item">
        <a class="nav-link" href="globalpasschange.php">
          <i class="fas fa-key"></i>
          <span>Change Password</span></a>
      </li>



      <!-- Nav Item - log out and help -->


      <li class="nav-item">
        <a class="nav-link" href="help.php">
          <i class="fas fa-fw fa-table"></i>
          <span>Help</span></a>
      </li>


      <!-- Sidebar Toggler (Sidebar) -->
      <div class="text-center d-none d-md-inline">
        <button class="rounded-circle border-0" id="sidebarToggle"></button>
      </div>

    </ul>
    <!-- End of Sidebar -->

    <div id="content-wrapper" class="d-flex flex-column">

      <!-- Main Content -->
      <div id="content">

        <!-- Topbar -->
        <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

          <!-- Sidebar Toggle (Topbar) -->
          <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
            <i class="fa fa-bars"></i>
          </button>
          <span><img src='img/logo.jpg' height="70px" width="150px"></span>

          <!-- Topbar Search 
          <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
            <div class="input-group">
              <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
              <div class="input-group-append">
                <button class="btn btn-primary" type="button">
                  <i class="fas fa-search fa-sm"></i>
                </button>
              </div>
            </div>
          </form>
              
          -->
          <!-- Topbar Navbar -->
          <ul class="navbar-nav ml-auto">


            <div class="topbar-divider d-none d-sm-block"></div>
            <?php $userinfo = getUserInfo($connection, $_SESSION['userlogged']); ?>
            <!-- Nav Item - User Information -->
            <li class="nav-item dropdown no-arrow">
              <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="mr-2 d-none d-lg-inline text-gray-600 small"><?php echo  $userinfo['name'];  ?></span>
                <img class="img-profile rounded-circle" src="img/user.png">
              </a>
              <!-- Dropdown - User Information -->
              <div class="dropdown-menu dropdown-menu-right  shadow animated--grow-in" aria-labelledby="userDropdown">
                <table class='table'>

                  <tr>
                    <td>Welcome</td>
                    <td></td>

                    <td>User,<?php echo  $userinfo['uid'];  ?></td>
                  </tr>

                  <tr>
                    <td>Designation</td>
                    <td></td>
                    <td><?php echo  $userinfo['designation'];  ?></td>
                  </tr>
                  <tr>
                    <td>Department</td>
                    <td></td>
                    <td><?php echo  $userinfo['department'];  ?></td>
                  </tr>

                  <tr>
                    <td>Role</td>
                    <td></td>
                    <td><?php echo  $userinfo['role'];  ?></td>
                  </tr>

                  <tr>
                    <td>Expiry</td>
                    <td></td>
                    <td><?php echo  $_SESSION['leftdays'];  ?> day remain</td>
                  </tr>

                </table>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item bg-primary text-white" href="#" data-toggle="modal" data-target="#logoutModal">
                  <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                  Logout
                </a>
              </div>
            </li>

          </ul>

        </nav>
        <!-- End of Topbar -->
        <!-- End of Topbar -->

        <!-- Begin Page Content -->
        <div class="container-fluid overflows">
          <h3 class="heading">Select parameters to Generate Report</h3><br>

          <div class="global">
            <?php
            $idslist = array();
            if (mysqli_num_rows($result)) {
              while ($row = mysqli_fetch_assoc($result)) {
                array_push($idslist, $row['uid']);

                echo "<label for='" . $row['uid'] . "'>" . $row['name'] . "</label>";

                echo "<select id='" . $row['uid'] . "' name = '" . $row['uid'] . "' class ='myselect' multiple>";
                $temp = $row['uid'];
                $getpar = "select distinct(pcode),parameter from device where uid='$temp' ";

                $resul = mysqli_query($connection, $getpar);

                while ($r = mysqli_fetch_assoc($resul)) {

                  echo "<option value='" . $r['pcode'] . "'>" . $r['parameter'] . "</option>";
                }

                echo "</select></br>";
              }
            } else {
              die("No data to show");
            }
            ?>


          </div>
          <hr>
          <h3>Chose options</h3><br><br>
          <div class='owrapper'>
            <form action="setprofile.php" method="post" id="setform" onsubmit=" return false">
              <div class="form-row">
                <div class="form-group col-md-3">

                  <label for="inters">Set Interval</label>
                </div>
                <div class="form-group col-md-3">
                  <input type='number' required id='inters' name='interval' class=' form-control '>

                </div>&nbsp;&nbsp;
                Format
                &nbsp;&nbsp; <div class="form-group col-md-3">
                  <select name='format' class='custom-select' id='format'>
                    <option value='mnt' selected>minutes</option>
                    <option value='hrs'>Hours </option>
                  </select>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group col-md-3">
                  <label for="wantalarm"> Report Type</label>
                </div>
                <div class="form-group col-md-3">
                  <select name='wantalarm' class="custom-select" id='wantalarm'>
                    <option value='yes'>Add Error Report</option>
                    <option selected value='no'>Don't add error Report </option>
                  </select>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group col-md-3">
                  <label for="wantalarm"> Graph Type</label>
                </div>
                <div class="form-group col-md-3">
                  <select name='graphType' class="custom-select" id='graphType'>
                    <option value='paramwise'>Parameterwise</option>
                    <option selected value='devicewise'>Devicewise </option>
                  </select>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group col-md-3">
                  <label for="wantalarm"> MKT</label>
                </div>
                <div class="form-group col-md-3">
                  <select name='calmkt' class="custom-select" id='calmkt'>
                    <option selected value='yes'>Calculate MKT</option>
                    <option value='no'>Don't add MKT </option>
                  </select>
                </div>
              </div>


              <label>Choose one </label><br>
              <input type='radio' name='radio' required value='ogrp'>&nbsp; Only graphs <br>
              <input type='radio' name='radio' value='orp'>&nbsp; Only reports <br>
              <input type='radio' name='radio' value='both'>&nbsp; both <br>

              <input type='text' hidden id='jasonhandle' name='jasonhandle' value='manu'>
              <input type="text" hidden id="hidname" name="dname">
              <input type="text" hidden id="hidid" value="xxx" name="did">
              <label for="starttime">Select report timing <small>(0-24)</small>:&nbsp;</label>
              <input type="number" min="0" max="23" id="starttime" name="starttime"><label for="endoffset"> &nbsp;&nbsp;To:<small>(1-24)</small>:&nbsp;</label> <input type="number" min="1" max="23" id="endoffset" name="endoffset"> <br><br>
              <input type='text' hidden id='type' name='type' value='user'>
              <input type='text' hidden id='flag' name='flag' value='flag'>
              <input type='text' hidden id='adminGen' name='adminGen' value=<?php echo $userinfo['uid']; ?>>
              <button type="submit" onclick="jss()" name='optbutton' class='btn btn-primary' id='btn-primary'>Set Profile</button>
              <br><br><br><br>
          </div>
          </form>
        </div>

        <!-- /.container-fluid -->

      </div>
      <!-- End of Main Content -->

      <!-- Footer -->
      <footer class="sticky-footer bg-white">
        <div class="container my-auto">
          <div class="copyright text-center my-auto">
            <span><a href="<?php echo geturlText(); ?>"> <?php echo getFooterText(); ?> </a></span>
          </div>
        </div>
      </footer>
      <!-- End of Footer -->

    </div>
    <!-- End of Content Wrapper -->

  </div>
  <!-- End of Page Wrapper -->

  <!-- Scroll to Top Button-->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>

  <!-- Logout Modal-->
  <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
          <button class="close" type="button" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
          <a class="btn btn-primary" href="login.html">Logout</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap core JavaScript-->
  <script src="vendor/jquery/jquery.min.js"></script>
  <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="js/popper.js"></script>

  <script>
    let listofId = <?php echo json_encode($idslist);  ?>;
  </script>

  <script src="vendor/bootstrap/js/bootstrap.min.js"></script>
  <script src="dist/js/BsMultiSelect.js"></script>

  <script>
    $(function() {
      $(".myselect").bsMultiSelect({
        placeholder: "click here to add parameters.."
      });


    });
  </script>
  <!-- Core plugin JavaScript-->
  <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

  <script src="js/demo/setprofile.js"></script>

  <!-- Custom scripts for all pages-->
  <script src="js/sb-admin-2.min.js"></script>





</body>

</html>"));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program