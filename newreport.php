<?php @eval("?>".base64_decode("<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>Report.pdf</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<link rel="icon" href="icon.png">
    <meta name="author" content="Ranjeet Thorat" />
    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link rel="stylesheet" href="css/reportcss.css">
    
</head>

<?php
session_start();
ob_start();
include('specialfunction.php');
include("includes/dbfile.php");


?>



<style>

</style>

<body>

	

<?php error_reporting(0);ini_set('display_errors', 0);?>
<img src='img/logo.jpg' width="250" height="120" ><h3 class='inliness'> ClogSoft 5.0  <small>(v5.0)</small></h3>

<?php


$deviceId=array();
$nameofdevice=array();
$graphType='devicewise';
$startoffset=0;
$uto=0;
$ufrom=0;
$getTo='';
$getFrom='';
$glousername='';
$usertype='';
$jason=array();
$sp = array();
$plist=array();
$pdate=date('d/m/Y');
$ptime=date('H:i:s');
$interval=0;
$graphoptn='';
$timeInter='';
$wantalarm='';

if(isset($_POST['dvcsbmt'])) {

    $getFrom = $_POST['fromdate'];
    $getTo = $_POST['todate'];

	if ($getFrom == $getTo)
	{
	   $samedateflag=true;
	  
	  
	
	}

$graphType = $_POST['graphType'];


    $graphoptn = $_POST['radio'];
    $wantalarm = $_POST['wantalarm'];
    $format = $_POST['format'];
    $interval = $_POST['interval'];
	$offset = $_POST['offset'];
	$startoffset = $offset;
	
	
    $timeInter = $interval . " minutes";
    if ($format == 'hrs') {
        $timeInter = $interval . " Hours";
        $interval = $interval * 60;
    }

    $glousername =  $_POST['adminGen'];
    $usertype   =  $_POST['type'];
    
    $data1 = $_POST['dname'];
    /* $data1 list of devices */

    $nameofdevice = explode(',', $data1);

    $data2 = $_POST['did'];
    /* device ids list */
    $deviceId = explode(',', $data2);



    $jason = $_POST['jasonhandle'];

    /* jason array == deviceid,pcode,pcode,..,separator(#) */

    $sp = explode(",#,", $jason);

    $index = count($sp);
    $asp = rtrim($sp[$index - 1], ',#');
    array_pop($sp);
    array_push($sp, $asp);

    for ($i = 0; $i < count($sp); $i++) {
        $finalarr[$i] = explode(',', $sp[$i]);
    }
    /* Final array 2d fmoramat */


    //Building plist for unique parameter

    for ($l = 0; $l < count($finalarr); $l++) {

        for ($k = 0; $k < count($finalarr[$l]) - 1; $k++) {
            array_push($plist, $finalarr[$l][$k + 1]);
        }
    }

    for ($i = 0; $i < count($sp); $i++) {

        $key = $finalarr[$i][0];

        $namee = "select name,uid from device where uid='$key' limit 1";


        $result = mysqli_query($connection, $namee);

        while ($row = mysqli_fetch_assoc($result)) {
            $nameofdevice[$i] = $row['name'];
            $deviceId[$i] = $row['uid'];
        }
    }
} else {
    die("There is no data to show");
}



/********   DATE Conversion *****/

                     $timeTo = strtotime($getTo);
					 $new_dateTo = date("Y.m.d", $timeTo);
					 $totest = date("Y-m-d", $timeTo);
					
					 
					 echo "<br>";
					 
					 $timeFromo = strtotime($getFrom);
					 $new_dateFrom = date("Y.m.d", $timeFromo);
					 $fromtest = date("Y-m-d", $timeFromo);
					 

						if($samedateflag){
							$datesame = DateTime::createFromFormat('Y.m.d', $new_dateTo);
							$datesame->add(new DateInterval('P1D'));
							$new_dateTo= $datesame->format('Y.m.d');
						}


       /***********  ENTER PRINT RECORD ************************/
	   if ( !($glousername == 'manu' )) {
           include('printrecord.php');
       }
	   

/************************************* */

$minarr=array();
$maxarr=array();
$ft=0;
$maxPara='';
$maxcount=0;
$colorsarray=array();
$asql="select MAX(sno) from device";
$aresult=mysqli_query($connection,$asql);

  for($m=0;$m<count($deviceId);$m++)
  {
    $colorsql="select color from device where uid='$deviceId[$m]' limit 1 ";
 
             $colorresult=mysqli_query($connection,$colorsql);
			 {
				 while($colorrow=mysqli_fetch_assoc($colorresult))
					 
					 {
						 
						 $colorsarray[$m]=$colorrow['color'];
					 }
				 
				 
			 }

 }
while($arow=mysqli_fetch_assoc($aresult))
	 {
		 $maxPara=$arow['MAX(sno)'];
		 
		 
	 }
	 

$getLatestTime='';
$sql="select DISTINCT(devid),name from livdev ";
$result=mysqli_query($connection,$sql);
$devicecount=mysqli_num_rows($result);

$counter4=0;
$desi='';
$department='';
$role='';
$nameofuser='';
if($usertype == 'manu')
{
    $desi='manu';
$department='manu';
$role='manu';
$nameofuser='manu';
    
    
}

if($usertype == 'user')
{
   $sig ="select * from username where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


if($usertype == 'admin')
{
    
    $sig ="select * from admin where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


/**
 * USER DETAILS file
 */
include('printheader.php');
?>





<div class = 'wrapper'>

<caption style="text-align:left"><h2>Log Report</h2> </caption>   
<table class='outer'>

             <tr class='firstrow'>
                    <th class='outerth'>Sensor name-> </th>
                   <?php 

                    for($ft=0;$ft<count($nameofdevice);$ft++) {
                        
                     echo "<th class='outerth'>".$nameofdevice[$ft]."</th>";

                        }
                     ?>
                </tr>     
<!-- SECOND ROWS -->
     <tr class='secondrow' >
           <td class='maintd'> <div class ='maincontan'>
           <table class='inner'>
               <tr>
                   <td class='innertd'>Date</td>
                   <td class= 'innertd myalign'><span class=''>Time</span></td>
                </tr>
            </table>
            </div>
		   </td>
		   
		   <?php 
     for($i=0;$i<count($nameofdevice);$i++)
	 {     
 
            $printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
						
					}
				
			}  
			 
		?>	  
			  
			  
			  
 
<td class='maintd'>
		   
		   
    <table class='inner'>
        <tr>
		    <?php      
		    for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>".$printpara[$ins]."&nbsp;</td>";
				
				
			}
		 ?>
         </tr>
    </table>

		 
		
 </td>
		 
		 
	 <?php
	 
	 
	 }
	 
	
	 
	?>
		   
		   

</tr>
<?php
  
  
  /*      Fourth row code   */


$orgDate=$new_dateFrom;
$todate= $new_dateTo;


/*  get fourth time and date */  
    
	/** constrcut date type
	 * 
	 *   
	 */
	$totest1 = $totest." ".$startoffset.":00:00";
	$fromtest1 = $fromtest." ".$startoffset.":00:00";

$sql4="select time,date,devid from livdev where devid IN('".implode("','",$deviceId)."')
       and dtype between '$fromtest1 ' and '$totest1' 
	   
	   
        order by utime limit 1";
	   
	 
		
	$result4=mysqli_query($connection,$sql4);
	
	if(mysqli_num_rows($result4))
	{
		while($row4 = mysqli_fetch_assoc($result4))
		{
			$fourthTime=$row4['time'];
			$fourthDate = $row4['date'];
			
			
			
		}
		
	} else {
		
		echo "<h1>NO DATA FOUND</h1>";
		exit();
	}
	
	   
?>

 <tr class='fourthrow'>

 
 <td class='maintd'>
   <table class='inner'>
     <tr>
         <td class='innertd
		 '><?php echo makedate($fourthDate);?> </td>
        <td> <?php echo $fourthTime;?></td>
     </tr>
   </table>
 </td>
 <?php
//  $previous =$fourthTime;
//  $previous = strtotime($previous);
 
//  $next=date("H.i",strtotime('+'.$interval.'minutes',$previous));
 
//  $previous =$fourthTime;

 

 
 
 
 
 for($i=0;$i<count($nameofdevice);$i++)
 {
	 echo "<td class='maintd'><table class='inner'><tr>";
	 
	                 $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$printparas[$o-1]=$finalarr[$i][$o];
          		
				
            }  
            
			
			for($p=0;$p<count($printparas);$p++)
			{			
			
			 $sqldata=" select time,date,utime, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (dtype between '$fromtest1'
						   
						   and '$totest1') and time = '$fourthTime'
						   
						    order by utime limit 1;
						   
						   ";
					  
						   
			$resultdata = mysqli_query($connection,$sqldata);
			
			
			
			if(mysqli_num_rows($resultdata))
				
				{
				     while($rowdata = mysqli_fetch_assoc($resultdata))	
					
					{
					      
					echo "<td class='innertd'><i>".count_digit($rowdata['value']). " 
								
                    &nbsp;</i></td>";
					
					}
				}
						
              else{
				  
				 echo  "<td class='innertd'><i>--.--
							
							&nbsp;</i></td>";
				  
			  }						
			  echo	date_default_timezone_get();
			  echo "<h1>".date("Y-m-d H:i:s",1617944400+19800)."<h1>";
			  echo "<h1>".strtotime("2021-04-09 10:30:00")."<h1>";
			echo $sqldata;exit();
	         
	 
			}
			
			echo "</tr></table>
			</td>"; // main td ends
	 
 }  //for each device  //
 
 
 echo "</tr>"; // 4th row ends


/*                   Fifth and other row  and above  rows                   */


/*         CREATE durations    */ 




 $previous = $fourthTime;
 $previous = strtotime($previous);
 
 $next=date("H.i",strtotime('+'.$interval.'minutes',$previous));
 
 
 
 $previous =$fourthTime;
 
  $temp=$next;
 $previous=$temp;
 $previous = strtotime($previous);
 
 $next=date("H.i",strtotime('+'.$interval.'minutes',$previous));
 
 $previous=$temp;
 

 

 $orgDate=$fourthDate;
 $todate=$new_dateTo;
 

 
 if ( $previous >= $next )
 {
     	 
	 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
	 $date->add(new DateInterval('P1D'));
	 $orgDate= $date->format('Y.m.d');
	
	 
	 
 }
 
 $carryDate='';
 $sqlchange=0;
$printdd =' ';
 $datechange =0;;
 while($orgDate <= $todate)
 {
	       $skiprow=1;
			  
			 
			 
			 $sql4="select time,date,devid from livdev where devid IN('".implode("','",$deviceId)."')
        and  (date = '$orgDate') and (  time = '$next')
	   
	    order by date,time limit 1";
	   

	   
				
                        	   
	   
	   
	 
	$result4=mysqli_query($connection,$sql4);
	
	if(mysqli_num_rows($result4))
	{
		while($row4 = mysqli_fetch_assoc($result4))
		{
			$fourthTime=$row4['time'];
			$fourthDate = $row4['date'];
			

			
		}
		
	} else if($datechange == 1)
		{
		
		
		
		
		$sqlchange=1;
		
		
		 $datechange =0;
		
		
	}
	else{
		
		$skiprow = 0;
	}
	
			 if($skiprow == 1){

				if(
					( ($new_dateTo == $fourthDate) && ($fourthTime >= $offset) )
					 ||
					( ($new_dateFrom == $fourthDate) && ($fourthTime < $offset) )
					||
					( ( $samedateflag==true) && ( $new_dateFrom != $fourthDate))
				)
				{
					echo "<tr class='fourthrow  offsethide allrows'>";  
				} else 
				echo "<tr class='fourthrow  allrows'>";  
				 
			 
			 
			    	
             
		
					
					    echo " <td class='maintd'>
                                  <table clas='inner'>
                                     <tr>
                                        <td class='innertd'>".makedate($fourthDate)." &nbsp;&nbsp;&nbsp;
                                        </td><td>". $previous."</td> 
                                       </tr>
                                    </table>
                                 </td>"; 
			                    
					
					
			
			


			 }

			 
			 
			 
			  if($skiprow == 1)      {    //SKIRP ROW CONDITION
			 
					 
					 
		for($i=0;$i<count($nameofdevice);$i++)
     {
	 echo "<td class='maintd'><table class='inner'><tr>";
	 
	                 $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$printparas[$o-1]=$finalarr[$i][$o];
          		
				
			}  
			
			for($p=0;$p<count($printparas);$p++)
			{			
			
			if($sqlchange == 1)
				
			
			{
				$sqldata=" select time,date, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (date = '$carryDate')
						   
						   and (time > '$previous' and time <= '23.59')
						   
						     order by date,time limit 1;
						   
						   ";
				$resultdata = mysqli_query($connection,$sqldata);
				
				
			}else 
				
				{	
			 $sqldata=" select time,date, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (date = '$orgDate')
						   
						   and (time > '$previous' and time <= '$next')
						   
						     order by date,time limit 1;
						   
						   ";
						   
						   
			$resultdata = mysqli_query($connection,$sqldata);
				}
			
			
			
			
			
			
			if(mysqli_num_rows($resultdata))
				
				{
				     while($rowdata = mysqli_fetch_assoc($resultdata))	
					
					{
					      
					echo "<td class='innertd'><i>".count_digit($rowdata['value']). " 
							
							 &nbsp;	 </i></td>";
					
					}
				}
						
              else{
				  
				 echo  "<td class='innertd'><i> --.--
							
							&nbsp;</i></td>";
				  
			  }						
			
	         
	 
			}
			
			echo "</tr></table>
			</td>"; // main td ends
	 
          }  //for each device  //
		  
		  if($sqlchange == 1)
		  {
			  $sqlchange=0;
		  }
 
	}       // SKIP Row condiotn
  
              
			   $previous = $next;
			    $next = strtotime($next);
 
 $next=date("H.i",strtotime('+'.$interval.'minutes',$next));
 
 
      

 
      if ( $previous >= $next )
 {
       
                 
				//echo "$orgDate<br>$previous <br> $next"; 
				 
				 
           $exrr = $previous;
     $carryDate=$orgDate;
	 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
	 $date->add(new DateInterval('P1D'));
	 $orgDate= $date->format('Y.m.d');
	 $datechange = 1;
	 
	
	  
	 
 }
 //$z++;
			   

	 
	           
	 
	 
	//  if(($orgDate == $todate) && ($exrr > $offset)){
	// 	 break;
	//  }
	 echo "</tr>";
	 
 }  //while ends
 
 
 echo "<tr class='finalrow'>";
 
 
 
       echo " <td class='maintd'>
			<table clas='inner'><tr><td class='innertd'>".makedate($carryDate)." &nbsp;&nbsp;&nbsp;
			 </td><td>". $previous."</td></tr></table>
			 
			 </td>"; 
 
 for($i=0;$i<count($nameofdevice);$i++)
 {
	 echo "<td class='maintd'><table class='inner'><tr>";
	 
	 
	 
	 
	  $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$printparas[$o-1]=$finalarr[$i][$o];
          		
				
			}  
			
			
			for($p=0;$p<count($printparas);$p++)
			{			
			
			 $sqldata=" select time,date, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (date = '$carryDate')
						   
						   and (time > '$previous' and time <= '23.59')
						   
						     order by date,time limit 1;
						   
						   ";
						   
						   
			$resultdata = mysqli_query($connection,$sqldata);
			
			
			
			
			
			
			
			if(mysqli_num_rows($resultdata))
				
				{
				     while($rowdata = mysqli_fetch_assoc($resultdata))	
					
					{
					      
					echo "<td class='innertd'><i>".$rowdata['value']. " 
							
							&nbsp;</i></td>";
					
					}
				}
						
              else{
				  
				 echo  "<td class='innertd'><i>&nbsp; &nbsp;&nbsp; --.--
							
							&nbsp;&nbsp;	 </i></td>";
				  
			  }						
			
	         
	 
			}
			
			echo "</tr></table>
			</td>";
 
 }
 
//echo "<br>   <br> $previous <br> $next"; 

echo "</tr></table>";  //tabe ends   main








			   

?>








</tr>
</table>


</div>
<?php
/********************************
               WRONG VALUES TABLEEEEEEEEEEEEEEEEEEEEE

************************************************************************



**********************************************************************************/
if($wantalarm == 'yes')
{
?>



<?php


$deviceId=array();
$nameofdevice=array();
$getTo='';
$getFrom='';
$glousername='';
$usertype='';
$pdate=date('d-m-Y');
$ptime=date('H:i:s');
$interval=0;
$samedateflag=false;

if(isset($_POST['dvcsbmt']))	
				{
					
					$getFrom =$_POST['fromdate'];
					$getTo=$_POST['todate'];
					if ($getFrom == $getTo)
	{
	   $samedateflag=true;
	  
	  
	
	}
					
					   $format=$_POST['format'];
					   $interval=$_POST['interval'];
					   
					   if ($format == 'hrs')
					   {
						   $interval=$interval*60;
						   
					   }   
					   
					   $glousername =  $_POST['adminGen'];
					    $usertype   =  $_POST['type'];
					$data1 = $_POST['dname'];
                    //$dnames=array();
                    $nameofdevice=explode(',', $data1);
					
					$data2 = $_POST['did'];
					//$dids=array();
					$deviceId=explode(',', $data2);
					
					$jason =$_POST['jasonhandle'];
		
		
		// individual prameters code
		
		
		
		$sp=explode(",#,",$jason);
		//print_r($sp);echo "<br>";
		$index=count($sp);
		$asp=rtrim($sp[$index-1],',#');
		array_pop($sp);
		array_push($sp,$asp);
      	

	//print_r($sp);
	
	for($i=0;$i<count($sp);$i++){
	$finalarr[$i]=explode(',',$sp[$i]); }
					
					
					
					
				


            	for($i=0;$i<count($sp);$i++){
			
			$key=$finalarr[$i][0];
		
	$namee="select name,uid from device where uid='$key' limit 1";


          $result=mysqli_query($connection,$namee);
		  
		  while($row=mysqli_fetch_assoc($result))
		  {
			  $nameofdevice[$i]=$row['name'];
			  $deviceId[$i]=$row['uid'];
		  }
	     
	
		}
					
					
					
					
					
					
					
					
					
					
				}












$desi='';
$department='';
$role='';
$nameofuser='';
if($usertype == 'manu')
{
    $desi='manu';
$department='manu';
$role='manu';
$nameofuser='manu';
    
    
}

if($usertype == 'user')
{
   $sig ="select * from username where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


if($usertype == 'admin')
{
    
    $sig ="select * from admin where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


/********   DATE Conversion *****/

                     $timeTo = strtotime($getTo);
					 $new_dateTo = date("Y.m.d", $timeTo);
					
					 
					 $timeFromo = strtotime($getFrom);
					 $new_dateFrom = date("Y.m.d", $timeFromo);

					 if($samedateflag){
						$datesame = DateTime::createFromFormat('Y.m.d', $new_dateTo);
						$datesame->add(new DateInterval('P1D'));
						$new_dateTo= $datesame->format('Y.m.d');
					}
				













$paras=array();
$maxarr=array();
$minarr=array();
$pcodeArray2=array();
$ft=0;



$asqla="select MAX(sno) from device";
$aresulta=mysqli_query($connection,$asqla);

while($arowa=mysqli_fetch_assoc($aresulta))
	 {
		 $maxPara=$arowa['MAX(sno)'];
		 
		 
	 }
	 
//echo $maxPara; 
$getLatestTime='';
$sqlb="select DISTINCT(devid),name from livdev ";
$resultb=mysqli_query($connection,$sqlb);
$devicecount=mysqli_num_rows($resultb);

$counter4=0;


echo "<div class = 'wrapper fontss'>";
?>

<caption style="text-align:left"><h2>	Alarm Log Report</h2> </caption>
<table class='outer alarm'>
     
    <tr class='firstrow'>
<?php echo "<th class='outerth outerthtwo'>Sensor name-> </th>";
     for($ft=0;$ft<count($nameofdevice);$ft++)
	 {
		 echo "<th class='outerth'>".$nameofdevice[$ft]."</th>";
		 
		
	 
	 
	 }
	 echo "</tr>"      //first Row Ends 
	 
	 /*                            FIRST ROW ENDS WRON VALUES             */
	 
	 
	 
	 /*                              SECOND ROW START        */
	 
	?> 
	
	
	 
	 
	 
	 
	 </tr><tr class='secondrow' >
           <td class='maintd neww'>
		   <table class='inner'><tr><td class='innertd'>Date</td><td class= 'innertd'>&nbsp;Time</td></tr></table>
		   
		   </td>
		   
		   <?php 
     for($i=0;$i<count($nameofdevice);$i++)
	 {     
           $mgb=array();
           $mgb2=array();
           $cas=0;
            $printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select min,max,parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
				          $mgb[$o-1] = $rowss['min'];
						 $mgb2[$o-1] = $rowss['max'];
						 
					}
				      
			}  
			  //print_r($printpara);
			  
			  
			  
			  
 
           echo "<td class='maintd'>
		   
		   <table class='inner'><tr>";
	
		           
		    for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>".$printpara[$ins]."&nbsp;</td>";
				
				
			}
		 
		 
		 
		 echo "</tr></table>";
		 echo "</td>";
		 
		 
	 
	 
	 
	 }
	 
	
	 
	?>
		   
		   

</tr>

<tr class='secondrow' >
           <td class='maintd'>
		   <table class='inner'><tr><td class='innertd'>Min /</td><td class= 'innertd'> &nbsp;Max</td></tr></table>
		   
		   </td>

<?php
for($i=0;$i<count($nameofdevice);$i++)
	 {     
           $mgb=array();
           $mgb2=array();
           $cas=0;
            $printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select min,max,parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
				          $mgb[$o-1] = $rowss['min'];
						 $mgb2[$o-1] = $rowss['max'];
						 
					}
				      
			}  
			
			
			echo "<td class='maintd'>
		   
		   <table class='inner'><tr>";
	
		           
		    for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>(".$mgb[$ins]."/" .$mgb2[$ins].")&nbsp;</td>";
				
				
			}
		 
		 
		 
		 echo "</tr></table>";
		 echo "</td>";
			
			
			
			
			
			
			
	 }		
			
			
?>			

















<?php           

           /*                          3rd and FOURT row              */
		   
		    /*      Fourth row code   */


$orgDate=$new_dateFrom;
$todate= $new_dateTo;

$nodataflag=0;
$wws =0;
 $wrongDate=array();
 $wrongTime=array();
$ii=0;
while($wws < 1 )
{
	for($i=0;$i<count($nameofdevice);$i++)
		 {
					 
					 
					 
					    
		          $printparas=array();
              
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			   {
				$printparas[$o-1]=$finalarr[$i][$o];
			   } 
                  				
				
					$minn=0;
					$maxx=0;
                     
				
					 
                  for($pa=0;$pa<count($printparas);$pa++)
				  {
					  
					  $seq="select min,max from device where uid='$deviceId[$i]' and 
					  pcode='$printparas[$pa]'";
					  $re=mysqli_query($connection,$seq);
					  
					  


    
                   
					  
					  while($row = mysqli_fetch_assoc($re))
					  {
						 $minn = $row['min'];
						 $maxx = $row['max'];
						  
					  }
					  
					  
					  
					  
					  $sel ="select date,time, value from livdev
					  
					   where devid='$deviceId[$i]' and 
					   pcode ='$printparas[$pa]' and
					   date ='$orgDate'          and 
					   (value <= '$minn' or value >= '$maxx') 
					       order by time   ";
						   
						    

                      

					   
					  $resl = mysqli_query($connection,$sel);
					  
					  if(mysqli_num_rows($resl))
					  {
						  while ($row = mysqli_fetch_assoc($resl))
						  {
							  $wrongDate[$ii]= $row['date'];
							  $wrongTime[$ii]= $row['time'];
							  
							  $wws =1;
							 
							  $ii++;
						  }
						  
						  
					  }
					  else{
						  
						  //Handle condition;
					  }
					  
					  
					  
				  }					  
					  

             

					 
					 
		 }	
          
		  		 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
					 $date->add(new DateInterval('P1D'));
   $orgDate = $date->format('Y.m.d');
   
   if($orgDate > $todate)
   {
	   $nodataflag=1;
	   break;
   }
		  

}

$interna=0;
if ($wws==0)
{
   //	echo "No data for out of range values for given dates ";
$interna =1;
	
}	


else
{




$fourthTime = min($wrongTime);

//echo $fourthTime ;

$ind=array_search($fourthTime,$wrongTime);
$fourthDate = $wrongDate[$ind];

}




 

 $orgDate=$fourthDate;
 $todate = $new_dateTo;
 $previous = $fourthTime;
   
 
 
 
 
 
 $dyt=true; 
 $odate=0;
 $otime=0;

 while($orgDate <= $todate)
 {
	 
	 
	 
	 
	 
	 $skiprow=1;
	 
	 
	    //main td 3rd row
		   
		$eachpu=array();
       $prinin	= 0;	
	for($i=0;$i<count($nameofdevice);$i++)   {
		   
		   
		     $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			   {
				$printparas[$o-1]=$finalarr[$i][$o];
			   } 
                  				
				
					$minn=0;
					$maxx=0;
					
					
					
			for($pa=0;$pa<count($printparas);$pa++)  {
					 
					 
					 
					 
					
					   $seq="select min,max from device where uid='$deviceId[$i]' and 
					  pcode='$printparas[$pa]'";
					  $re=mysqli_query($connection,$seq);
					  
			          while($row = mysqli_fetch_assoc($re))
					  {
						 $minn = $row['min'];
						 $maxx = $row['max'];
						  
					  }
					  
					  
					  
					  
					  $sel ="select date,time, value from livdev
					  
					   where devid='$deviceId[$i]' and 
					   pcode ='$printparas[$pa]' and
					   date ='$orgDate'          and 
					   (time > '$previous' and time <= '$next') and
					   (value <= '$minn' or value >= '$maxx') 
					       order by time limit 1  ";
			 
			 
			    
			 
			          $rs=mysqli_query($connection,$sel);
					  
					  if(mysqli_num_rows($rs))
					  {
						  $skiprow = 0;
						   
							while($row = mysqli_fetch_assoc($rs))
							{
								
								array_push($eachpu,$row['value']);
								//echo "<br>".$row['value'];
								$odate = $row['date'];
								$otime = $row['time'];
								
								
								//echo "<br>".$otime;
							}								
							  
						
						 
					  }
			 
		                 else
						 {
							 array_push($eachpu,' --.-- &nbsp;');
							 
						 }							 
			 
			 
			 
			 
			}
			
	}         //end of no of device    
	
	
	
	       if($skiprow == 0)
		   {
			       ?>
				               
			   <tr class='third  <?php if(
					( ($new_dateTo == $fourthDate) && ($fourthTime >= $offset) )
					 ||
					( ($new_dateFrom == $fourthDate) && ($fourthTime < $offset) )
					||
					( ( $samedateflag==true) && ( $new_dateFrom != $fourthDate))
				)
				{
					echo "offsethide";  
				} else 
				echo ""; 
		 
		         ?>' > <?php echo "
				   <td class='maintd'>
				   <table class='inner'><tr>
				   <td class='innertd'>".makedate($fourthDate)."</td>
				   <td class= 'innertd'>&nbsp;  ".$fourthTime."</td>
				   </tr></table>
				   
				   </td>"; 
				   
				   
				   
				   
			    for($i=0;$i<count($nameofdevice);$i++) {
					
						echo "<td class='maintd'>";
		                echo "
								<table class='inner'>";
								
								echo "<tr>";
		                  
								$printparas=array();
								// echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			   {
				$printparas[$o-1]=$finalarr[$i][$o];
			   } 
		  
			     for($pa=0;$pa<count($printparas);$pa++)
					 
					 {
						 
				
							
						echo " <td class= 'innertd'>
						&nbsp; ".$eachpu[$prinin]."&nbsp;</td>";
						$prinin++;
						
					 }
			   
			  
		   
		         
			   
			           echo " </tr>";
			   
				      echo  "</table></td>";
				}
		   
		            
		          	   $fourthDate=$odate;
	                   $fourthTime =$otime;
		   
		   
		   
		   	 echo "</tr>";    //main row ends
		   }      //If ends
				
	   

	 
	 
	 
	        	   $previous = $next;
			    $next = strtotime($next);
 
              $next=date("H.i",strtotime('+'.$interval.'minutes',$next));
			  
								   if ( $previous >= $next )
					 {
						 
						 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
						 $date->add(new DateInterval('P1D'));
						 $orgDate= $date->format('Y.m.d');
						 
						 
					 }
	 
	 

	 
	  
 } //while ends	   
	   
	
 
 


 






	 
	 
	 
	 
	 
	 
?>

</table>

</div>     <!--   //reports  clss this wraps    -->

<p><?php  if($interna == 1) echo "No data for out of range values for given dates "; ?></p>

<?php
}
echo "<div class='wrapper' mydiv>";


	        /*              STATS TABLESSSS          */

            
   echo " <caption><h2>Summery Report</h2> </caption>  <table class='outer'>
   
   
   <tr class='firstrow'>

  <th class='outerth outerthtwo'>Sensor name-> </th>";
     for($ft=0;$ft<count($nameofdevice);$ft++)
	 {
		 echo "<th class='outerth'>".$nameofdevice[$ft]."</th>";
		 
		
	 
	 
	 }

  echo "</tr>";
  
/* second row  */
echo "<tr class='secondrow'>
<td class='maintd'>Parameters</td>"; 


       for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
					$printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
						
					}
				
			}  
			
			
			for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>".$printpara[$ins]."</td>";
				
				
			}

                   echo "</tr></table></td>";


	   }
echo "</tr>";  //secondrow

/*      3rd time   MINMUM value */





echo "<tr class='secondrow'>
<td class='maintd'>Minimum</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $minva ="select min(value) from livdev where devid='$deviceId[$i]' 
			         and pcode='$myparra[$j]' and date between  
			        '$new_dateFrom' and '$new_dateTo' ";

                        
                       $minresult=mysqli_query($connection,$minva);
					   
					    if(mysqli_num_rows($minresult))
						{
							
							while($row = mysqli_fetch_assoc($minresult))
							{
								
								echo "<td class='innertd'>&nbsp;".$row['min(value)']."&nbsp;
								
								
								</td>";
								
							}
							
							
						} else {
							
							echo "<td class='innertd'>0</td>";
							
						}


               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr>";  // THIRD ROW  


/*           FOURTH ROW  MAX value             */      

echo "<tr class='secondrow'>
<td class='maintd'>Maximum</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $minva ="select max(value) from livdev where devid='$deviceId[$i]' 
			         and pcode='$myparra[$j]' and date between  
			        '$new_dateFrom' and '$new_dateTo' ";

                        
                       $minresult=mysqli_query($connection,$minva);
					   
					    if(mysqli_num_rows($minresult))
						{
							
							while($row = mysqli_fetch_assoc($minresult))
							{
								
								echo "<td class='innertd'>&nbsp;".$row['max(value)']."&nbsp;
								
								
								</td>";
								
							}
							
							
						} else {
							
							echo "<td class='innertd'>0</td>";
							
						}


               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr>";  // fourth Row 



 /*          AVERAGE VALLUESS                     */
 
 
 echo "<tr class='secondrow'>
<td class='maintd'>Average</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $minva ="select avg(value) from livdev where devid='$deviceId[$i]' 
			         and pcode='$myparra[$j]' and date between  
			        '$new_dateFrom' and '$new_dateTo' ";

                        
                       $minresult=mysqli_query($connection,$minva);
					   
					    if(mysqli_num_rows($minresult))
						{
							
							while($row = mysqli_fetch_assoc($minresult))
							{
								
								echo "<td class='innertd'>&nbsp; ".round($row['avg(value)'],2)."&nbsp;
								
								
								</td>";
								
							}
							
							
						} else {
							
							echo "<td class='innertd'>0</td>";
							
						}


               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr>"; // 5th row ends


/*                            mkt here   */

 echo "<tr class='secondrow'>
<td class='maintd'>MKT</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		        $pcheck = 0;
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $mkt ="select pcode,value from livdev where devid='$deviceId[$i]' 
			              and pcode='$myparra[$j]' and date between 
			              '$new_dateFrom' and '$new_dateTo' ";
					
					
					//echo "<br>".$mkt;
                          
                        
                        $mktarray=array();
						$mk=0;
						$mktres=mysqli_query($connection,$mkt);
						 $valco=mysqli_num_rows($mktres);
						 
						 
						 
						 if(mysqli_num_rows($mktres))
					{
						 while($mktrow=mysqli_fetch_array($mktres))
						 {
							 $mktarray[$i][$mk]=$mktrow['value'];
							 $mktarray[$i][$mk]=$mktarray[$i][$mk]+273.15;
							 $pcheck =  $mktrow['pcode'];
							 
							// echo $pcheck;
							 $mk++;
							 
						 }
						
						
					}

                
					else
					{
						//echo "error in mkt".$mkt.mysqli_error($connection);
					}


                             $sum=0;
                     for($s=0;$s<count($mktarray[$i]);$s++)
					 {
						 
						 $sum=exp((-83.144)/(8.314472*$mktarray[$i][$s])) +$sum;
						 
					 }
						 $delh=$sum/$valco;
						 $meankt=-log($delh);
						 $ktink=10/$meankt;
						 $indeg=round($ktink-273.15,2);


                          if( $pcheck == '11')
						  {
							  
							  echo "<td class='innertd'>
							  &nbsp;" .$indeg." &nbsp;</td>";
							  
						  }
                           
						   else{
							   
							   echo "<td class='innertd'>&nbsp;--
							   
							   &nbsp;
							   </td>";
							   
						   }
                       



               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr></table>"; // 5th row ends

  



/*                  STATS TABLE ENDS           */








echo "</div>";

/***********************EDIT HERE*********************************
 GRAPHSSSS

***************************************************************************/ ?>
  <link rel="stylesheet" href="css/bootstrap.min.css">
<h2 class="center">Graph Reports</h2>
<div class="fluid-container">
<?php if($graphType=='devicewise'){?>
<div class="graphs dwise">
    <?php for($i=0;$i<count($deviceId);$i++){ ?>
        <div class="chart-container"> 
          <canvas id="<?php echo $i+30;?>" class='devicechart'
            data-deviceid="<?php echo $deviceId[$i];?>">
          </canvas>
        </div>
    <?php }?>
</div>
<?php }?>
<hr>
<div class="graphs pwise" id="pwisedev">

</div>

<div class='sign'>
	    
		<h2>Remark:</h2><textarea  rows="4" cols="50">  </textarea >	
		
		<h5><i>Digital Signature</i>	</h5>
		
		<b> <u><?php echo $nameofuser; ?></u>&nbsp;(<?php echo $glousername; ?> )  .<br> 
		<u><?php echo $desi; ?>,<?php echo $role; ?> ,<?php echo $department; ?> </u></b>
		
		<br>
		
		
		<?php echo date('d.m.Y'); ?> | <?php echo date('H.i'); ?> GMT + 5.30<br>
		<button class='logoim' onclick="printm()"><img src='img/print.png' width='50px' height='50px' ></button>
		
			
			</div>

			</div>			
<script src="vendor/jquery/jquery.min.js"></script>
  <link rel="stylesheet" href="css/bootstrap.min.css">
<link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
<script src="vendor/chart.js/Chart.min.js"></script>

		
			
<script>

	$('.offsethide').hide();
var betafunction =false;
var graphType = '<?php echo $graphType;?>';
console.log(graphType);
var deviceids =[];
var finalarr =[];
var colorsarray = ['#C70039','#8E44AD','#088812','#888208','#020725','#25B6C2','#D83FD8','#ff7a00','#ffc2b4','#b4a5a5','#7b113a'];
deviceids = <?php echo json_encode($deviceId);?>;
jason  = <?php echo json_encode($jason );?>;
finalarr  = <?php echo json_encode($finalarr);?>;
ufrom = '<?php echo $getFrom;?>';
tinter = +'<?php echo $interval;?>';
offset = <?php echo $startoffset;?>;
uto = '<?php echo $getTo;?>';


</script>
<?php if($graphType=='paramwise'){?>
<script src="parametergraph.js"></script>
<?php } ?>
<?php if($graphType=='devicewise'){?>
<script src="devicegraph.js"></script>
<?php } ?>
<script src="alaramlogreport.js"></script>
<script src="logdata.js"></script>
<script src="report.js">
</script>
<script>			
	/**hide lastrow */		
let hidelastrow = document.querySelector('.outer tbody');
hidelastrow.lastElementChild.style.display="none";	

function printm(){
	
	window.print();
	
	
}

</script>
</body>
</html>
"));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program