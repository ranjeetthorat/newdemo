<?php @eval("?>".base64_decode("<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<title>Report.pdf</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<link rel="icon" href="icon.png">
    <meta name="author" content="Ranjeet Thorat" />
    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link rel="stylesheet" href="css/reportcss.css">
    
</head>

<?php
session_start();
ob_start();
include('specialfunction.php');
include("includes/dbfile.php");


?>



<style>

</style>

<body>

	

<?php error_reporting(0);ini_set('display_errors', 0);?>
<img src='img/logo.jpg' width="250" height="120" ><h3 class='inliness'> ClogSoft 5.0  <small>(v5.0)</small></h3>

<?php


$deviceId=array();
$nameofdevice=array();
$graphType='devicewise';
$startoffset=0;
$uto=0;
$ufrom=0;
$getTo='';
$getFrom='';
$glousername='';
$usertype='';
$jason=array();
$sp = array();
$plist=array();
$pdate=date('d/m/Y');
$ptime=date('H:i:s');
$interval=0;
$graphoptn='';
$timeInter='';
$wantalarm='';
$endoffset='';

if(isset($_POST['dvcsbmt'])) {

    $getKey = $_POST['getKey'];

$getdata = "SELECT * from profile where userid ='$getKey' ";
$resdata = mysqli_query($connection,$getdata);
if(mysqli_num_rows($resdata) == 0){
	die("<h1>You have not set any profile for report .Please set profile first</h1>");
}

$getFrom =date('Y.m.d', strtotime(' -1 day'));
$getTo =date('Y.m.d');

// $getFrom = "2020.10.01";
// $getTo = "2020.12.31";





  while($rowdata = mysqli_fetch_assoc($resdata))
  {
    $graphoptn = $rowdata['graphopt'];
    $wantalarm = $rowdata['wantalarm'];
    $timefilter = $rowdata['starttime'];
    $interval = $rowdata['pinterval'];
    $timeInter = $interval . " minutes";
    $glousername =  $rowdata['userid'];
    $usertype   =  $rowdata['type'];
    $data2 = $rowdata['devid'];
    $jason = $rowdata['json'];
  }
  $offset = $timefilter;
  $startoffset = $offset;
  

   
    
    // $data1 = $_POST['dname'];
    /* $data1 list of devices */

    

    
    /* device ids list */
    $deviceId = explode(',', $data2);

    for($dev=0;$dev<count($deviceId);$dev++){
        $dkey = $deviceId[$dev];
        $getnames = "select name from  device where uid = '$dkey' ";
        $gernameresult = mysqli_query($connection,$getnames);
        while($devrow = mysqli_fetch_assoc($gernameresult)){
            $$nameofdevice[$dev] = $devrow['name'];

        }
    }



    // $nameofdevice = explode(',', $data1);



    

    /* jason array == deviceid,pcode,pcode,..,separator(#) */
  
    $sp = explode(",#,", $jason);

    $index = count($sp);
    $asp = rtrim($sp[$index - 1], ',#');
    array_pop($sp);
    array_push($sp, $asp);

    for ($i = 0; $i < count($sp); $i++) {
        $finalarr[$i] = explode(',', $sp[$i]);
    }
    /* Final array 2d fmoramat */


    //Building plist for unique parameter

    for ($l = 0; $l < count($finalarr); $l++) {

        for ($k = 0; $k < count($finalarr[$l]) - 1; $k++) {
            array_push($plist, $finalarr[$l][$k + 1]);
        }
    }

    for ($i = 0; $i < count($sp); $i++) {

        $key = $finalarr[$i][0];

        $namee = "select name,uid from device where uid='$key' limit 1";


        $result = mysqli_query($connection, $namee);

        while ($row = mysqli_fetch_assoc($result)) {
            $nameofdevice[$i] = $row['name'];
            $deviceId[$i] = $row['uid'];
        }
    }
} else {
    die("There is no data to show");
}



/********   DATE Conversion *****/

                     $timeTo = $getTo;
					 $new_dateTo = $timeTo ;
					 //date("Y.m.d", $timeTo);
					
					 
					 $timeFromo = $getFrom;
					 $new_dateFrom =  $timeFromo;
					 //date("Y.m.d", $timeFromo);





       /***********  ENTER PRINT RECORD ************************/
	   if ( !($glousername == 'manu' )) {
           include('printrecord.php');
       }
	   

/************************************* */

$minarr=array();
$maxarr=array();
$ft=0;
$maxPara='';
$maxcount=0;
$colorsarray=array();
$asql="select MAX(sno) from device";
$aresult=mysqli_query($connection,$asql);

  for($m=0;$m<count($deviceId);$m++)
  {
    $colorsql="select color from device where uid='$deviceId[$m]' limit 1 ";
 
             $colorresult=mysqli_query($connection,$colorsql);
			 {
				 while($colorrow=mysqli_fetch_assoc($colorresult))
					 
					 {
						 
						 $colorsarray[$m]=$colorrow['color'];
					 }
				 
				 
			 }

 }
while($arow=mysqli_fetch_assoc($aresult))
	 {
		 $maxPara=$arow['MAX(sno)'];
		 
		 
	 }
	 

$getLatestTime='';
$sql="select DISTINCT(devid),name from livdev ";
$result=mysqli_query($connection,$sql);
$devicecount=mysqli_num_rows($result);

$counter4=0;
$desi='';
$department='';
$role='';
$nameofuser='';
if($usertype == 'manu')
{
    $desi='manu';
$department='manu';
$role='manu';
$nameofuser='manu';
    
    
}

if($usertype == 'user')
{
   $sig ="select * from username where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


if($usertype == 'admin')
{
    
    $sig ="select * from admin where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


/**
 * USER DETAILS file
 */
include('printheader.php');
?>





<div class = 'wrapper'>

<caption style="text-align:left"><h2>Log Report</h2> </caption>   
<table class='outer'>

             <tr class='firstrow'>
                    <th class='outerth'>Sensor name-> </th>
                   <?php 

                    for($ft=0;$ft<count($nameofdevice);$ft++) {
                        
                     echo "<th class='outerth'>".$nameofdevice[$ft]."</th>";

                        }
                     ?>
                </tr>     
<!-- SECOND ROWS -->
     <tr class='secondrow' >
           <td class='maintd'> <div class ='maincontan'>
           <table class='inner'>
               <tr>
                   <td class='innertd'>Date</td>
                   <td class= 'innertd myalign'><span class=''>Time</span></td>
                </tr>
            </table>
            </div>
		   </td>
		   
		   <?php 
     for($i=0;$i<count($nameofdevice);$i++)
	 {     
 
            $printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
						
					}
				
			}  
			 
		?>	  
			  
			  
			  
 
<td class='maintd'>
		   
		   
    <table class='inner'>
        <tr>
		    <?php      
		    for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>".$printpara[$ins]."&nbsp;</td>";
				
				
			}
		 ?>
         </tr>
    </table>

		 
		
 </td>
		 
		 
	 <?php
	 
	 
	 }
	 
	
	 
	?>
		   
		   

</tr>
<?php
  
  
  /*      Fourth row code   */


$orgDate=$new_dateFrom;
$todate= $new_dateTo;


/*  get fourth time and date */  
    
	
	

$sql4="select time,date,devid from livdev where devid IN('".implode("','",$deviceId)."')
	   and date between '$orgDate' and '$todate' 
	   
	   
	   
        order by date,time limit 1";
	   
	  
	   
	$result4=mysqli_query($connection,$sql4);
	
	if(mysqli_num_rows($result4))
	{
		while($row4 = mysqli_fetch_assoc($result4))
		{
			$fourthTime=$row4['time'];
			$fourthDate = $row4['date'];
			
			
			
		}
		
	} else {
		
		echo "<h1>NO DATA FOUND</h1>";
		exit();
	}
	
	   
?>

 <tr class='fourthrow
 <?php if(($new_dateFrom == $fourthDate) && ($fourthTime < $offset)){
			 echo "offsethide";
		 }
		 
		 ?>
 
 
 
 '>
 
 <td class='maintd'>
   <table class='inner'>
     <tr>
         <td class='innertd'><?php echo makedate($fourthDate);?> </td>
        <td> <?php echo $fourthTime;?></td>
     </tr>
   </table>
 </td>
 <?php
 
 $previous =$fourthTime;
 $previous = strtotime($previous);
 
 $next=date("H.i",strtotime('+'.$interval.'minutes',$previous));
 
 $previous =$fourthTime;

 

 
 
 
 
 for($i=0;$i<count($nameofdevice);$i++)
 {
	 echo "<td class='maintd'><table class='inner'><tr>";
	 
	                 $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$printparas[$o-1]=$finalarr[$i][$o];
          		
				
            }  
            
			
			for($p=0;$p<count($printparas);$p++)
			{			
			
			 $sqldata=" select time,date, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (date between '$orgDate'
						   
						   and '$todate') and (time between '$previous' and '$next')
						   
						    order by date,time limit 1;
						   
						   ";
					  
						   
			$resultdata = mysqli_query($connection,$sqldata);
			
			
			
			if(mysqli_num_rows($resultdata))
				
				{
				     while($rowdata = mysqli_fetch_assoc($resultdata))	
					
					{
					      
					echo "<td class='innertd'><i>".count_digit($rowdata['value']). " 
								
                    &nbsp;</i></td>";
					
					}
				}
						
              else{
				  
				 echo  "<td class='innertd'><i>--.--
							
							&nbsp;</i></td>";
				  
			  }						
			
	         
	 
			}
			
			echo "</tr></table>
			</td>"; // main td ends
	 
 }  //for each device  //
 
 
 echo "</tr>"; // 4th row ends


/*                   Fifth and other row  and above  rows                   */


/*         CREATE durations    */ 




 $previous = $fourthTime;
 $previous = strtotime($previous);
 
 $next=date("H.i",strtotime('+'.$interval.'minutes',$previous));
 
 
 
 $previous =$fourthTime;
 
  $temp=$next;
 $previous=$temp;
 $previous = strtotime($previous);
 
 $next=date("H.i",strtotime('+'.$interval.'minutes',$previous));
 
 $previous=$temp;
 

 

 $orgDate=$fourthDate;
 $todate=$new_dateTo;
 

 
 if ( $previous >= $next )
 {
     	 
	 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
	 $date->add(new DateInterval('P1D'));
	 $orgDate= $date->format('Y.m.d');
	
	 
	 
 }
 
 $carryDate='';
 $sqlchange=0;
$printdd =' ';
 $datechange =0;;
 while($orgDate <= $todate)
 {
	       $skiprow=1;
			  
			 
			 
			 $sql4="select time,date,devid from livdev where devid IN('".implode("','",$deviceId)."')
        and  (date = '$orgDate') and (time > '$previous' and  time <= '$next')
	   
	    order by date,time limit 1";
	   

	   
				
                        	   
	   
	   
	 
	$result4=mysqli_query($connection,$sql4);
	
	if(mysqli_num_rows($result4))
	{
		while($row4 = mysqli_fetch_assoc($result4))
		{
			$fourthTime=$row4['time'];
			$fourthDate = $row4['date'];
			

			
		}
		
	} else if($datechange == 1)
		{
		
		
		
		
		$sqlchange=1;
		
		
		 $datechange =0;
		
		
	}
	else{
		
		$skiprow = 0;
	}
	
			 if($skiprow == 1){
				 
				if(
					( ($new_dateTo == $fourthDate) && ($fourthTime >= $offset) )
					 ||
					( ($new_dateFrom == $fourthDate) && ($fourthTime < $offset) )
					||
					( $new_dateFrom != $fourthDate)
				)
				{
					echo "<tr class='fourthrow  offsethide allrows'>";  
				} else 
				echo "<tr class='fourthrow  allrows'>"; 
			 
			    	
             
		
					
					    echo " <td class='maintd'>
                                  <table clas='inner'>
                                     <tr>
                                        <td class='innertd'>".makedate($fourthDate)." &nbsp;&nbsp;&nbsp;
                                        </td><td>". $previous."</td> 
                                       </tr>
                                    </table>
                                 </td>"; 
			                    
					
					
			
			


			 }

			 
			 
			 
			  if($skiprow == 1)      {    //SKIRP ROW CONDITION
			 
					 
					 
		for($i=0;$i<count($nameofdevice);$i++)
     {
	 echo "<td class='maintd'><table class='inner'><tr>";
	 
	                 $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$printparas[$o-1]=$finalarr[$i][$o];
          		
				
			}  
			
			for($p=0;$p<count($printparas);$p++)
			{			
			
			if($sqlchange == 1)
				
			
			{
				$sqldata=" select time,date, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (date = '$carryDate')
						   
						   and (time > '$previous' and time <= '23.59')
						   
						     order by date,time limit 1;
						   
						   ";
				$resultdata = mysqli_query($connection,$sqldata);
				
				
			}else 
				
				{	
			 $sqldata=" select time,date, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (date = '$orgDate')
						   
						   and (time > '$previous' and time <= '$next')
						   
						     order by date,time limit 1;
						   
						   ";
						   
						   
			$resultdata = mysqli_query($connection,$sqldata);
				}
			
			
			
			
			
			
			if(mysqli_num_rows($resultdata))
				
				{
				     while($rowdata = mysqli_fetch_assoc($resultdata))	
					
					{
					      
					echo "<td class='innertd'><i>".count_digit($rowdata['value']). " 
							
							 &nbsp;	 </i></td>";
					
					}
				}
						
              else{
				  
				 echo  "<td class='innertd'><i> --.--
							
							&nbsp;</i></td>";
				  
			  }						
			
	         
	 
			}
			
			echo "</tr></table>
			</td>"; // main td ends
	 
          }  //for each device  //
		  
		  if($sqlchange == 1)
		  {
			  $sqlchange=0;
		  }
 
	}       // SKIP Row condiotn
  
              
			   $previous = $next;
			    $next = strtotime($next);
 
 $next=date("H.i",strtotime('+'.$interval.'minutes',$next));
 
 
      

 
      if ( $previous >= $next )
 {
       
                 
				//echo "$orgDate<br>$previous <br> $next"; 
				 
				 
           $exrr = $previous;
     $carryDate=$orgDate;
	 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
	 $date->add(new DateInterval('P1D'));
	 $orgDate= $date->format('Y.m.d');
	 $datechange = 1;
	 
	
	  
	 
 }
 //$z++;
			   

	 
//  if(($orgDate == $todate) && ($exrr > $offset)){
// 	break;
// }       
	 
	 
	 
	 echo "</tr>";
	 
 }  //while ends
 
 if(( $new_dateFrom != $fourthDate))
 echo "<tr class='finalrow offsethide'>";
 else
 echo "<tr class='finalrow'>";
 
 
 
       echo " <td class='maintd'>
			<table clas='inner'><tr><td class='innertd'>".makedate($carryDate)." &nbsp;&nbsp;&nbsp;
			 </td><td>". $previous."</td></tr></table>
			 
			 </td>"; 
 
 for($i=0;$i<count($nameofdevice);$i++)
 {
	 echo "<td class='maintd'><table class='inner'><tr>";
	 
	 
	 
	 
	  $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$printparas[$o-1]=$finalarr[$i][$o];
          		
				
			}  
			
			
			for($p=0;$p<count($printparas);$p++)
			{			
			
			 $sqldata=" select time,date, value from livdev where devid='$deviceId[$i]'
			 
			               and pcode='$printparas[$p]' and (date = '$carryDate')
						   
						   and (time > '$previous' and time <= '23.59')
						   
						     order by date,time limit 1;
						   
						   ";
						   
						   
			$resultdata = mysqli_query($connection,$sqldata);
			
			
			
			
			
			
			
			if(mysqli_num_rows($resultdata))
				
				{
				     while($rowdata = mysqli_fetch_assoc($resultdata))	
					
					{
					      
					echo "<td class='innertd'><i>".$rowdata['value']. " 
							
							&nbsp;</i></td>";
					
					}
				}
						
              else{
				  
				 echo  "<td class='innertd'><i>&nbsp; &nbsp;&nbsp; --.--
							
							&nbsp;&nbsp;	 </i></td>";
				  
			  }						
			
	         
	 
			}
			
			echo "</tr></table>
			</td>";
 
 }
 
//echo "<br>   <br> $previous <br> $next"; 

echo "</tr></table>";  //tabe ends   main








			   

?>








</tr>
</table>


</div>
<?php





/********************************
               WRONG VALUES TABLEEEEEEEEEEEEEEEEEEEEE

************************************************************************



**********************************************************************************/
if($wantalarm == 'yes')
{
?>



<?php


$deviceId=array();
$nameofdevice=array();
$getTo='';
$getFrom='';
$glousername='';
$usertype='';
$pdate=date('d-m-Y');
$ptime=date('H:i:s');
$interval=0;

if(isset($_POST['dvcsbmt']))	
				{
					
                    $getKey = $_POST['getKey'];

                    $getdata = "SELECT * from profile where userid ='$getKey' ";
                    $resdata = mysqli_query($connection,$getdata);
                    
                    
					$getFrom =date('Y.m.d', strtotime(' -1 day'));
					$getTo =date('Y.m.d');
                    
                      while($rowdata = mysqli_fetch_assoc($resdata))
                      {
                        $graphoptn = $rowdata['graphopt'];
                        $wantalarm = $rowdata['wantalarm'];
                        $timefilter = $rowdata['starttime'];
                        $interval = $rowdata['pinterval'];
                        $timeInter = $interval . " minutes";
                        $glousername =  $rowdata['userid'];
                        $usertype   =  $rowdata['type'];
                        $data2 = $rowdata['devid'];
                        $jason = $rowdata['json'];
                      }
		
		
		$sp=explode(",#,",$jason);
		//print_r($sp);echo "<br>";
		$index=count($sp);
		$asp=rtrim($sp[$index-1],',#');
		array_pop($sp);
		array_push($sp,$asp);
      	

	//print_r($sp);
	
	for($i=0;$i<count($sp);$i++){
	$finalarr[$i]=explode(',',$sp[$i]); }
					
					
					
					
				


            	for($i=0;$i<count($sp);$i++){
			
			$key=$finalarr[$i][0];
		
	$namee="select name,uid from device where uid='$key' limit 1";


          $result=mysqli_query($connection,$namee);
		  
		  while($row=mysqli_fetch_assoc($result))
		  {
			  $nameofdevice[$i]=$row['name'];
			  $deviceId[$i]=$row['uid'];
		  }
	     
	
		}
					
					
					
					
					
					
					
					
					
					
				}












$desi='';
$department='';
$role='';
$nameofuser='';
if($usertype == 'manu')
{
    $desi='manu';
$department='manu';
$role='manu';
$nameofuser='manu';
    
    
}

if($usertype == 'user')
{
   $sig ="select * from username where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


if($usertype == 'admin')
{
    
    $sig ="select * from admin where uid = '$glousername'";
   $resso = mysqli_query($connection,$sig);
   while($roer=mysqli_fetch_assoc($resso))
   {
	 $desi = $roer['designation'];
	 $role = $roer['role'];
	 $department = $roer['deptname'];
	 $nameofuser = $roer['name'];
	 
	 
	   
   }
    
}


/********   DATE Conversion *****/

                    $timeTo = $getTo;
					 $new_dateTo = $timeTo ;
					 //date("Y.m.d", $timeTo);
					
					 
					 $timeFromo = $getFrom;
					 $new_dateFrom =  $timeFromo;
					 //date("Y.m.d", $timeFromo);













$paras=array();
$maxarr=array();
$minarr=array();
$pcodeArray2=array();
$ft=0;



$asqla="select MAX(sno) from device";
$aresulta=mysqli_query($connection,$asqla);

while($arowa=mysqli_fetch_assoc($aresulta))
	 {
		 $maxPara=$arowa['MAX(sno)'];
		 
		 
	 }
	 
//echo $maxPara; 
$getLatestTime='';
$sqlb="select DISTINCT(devid),name from livdev ";
$resultb=mysqli_query($connection,$sqlb);
$devicecount=mysqli_num_rows($resultb);

$counter4=0;


echo "<div class = 'wrapper fontss'>";
?>

<caption style="text-align:left"><h2>	Alarm Log Report</h2> </caption>
<table class='outer alarm'>
     
    <tr class='firstrow'>
<?php echo "<th class='outerth outerthtwo'>Sensor name-> </th>";
     for($ft=0;$ft<count($nameofdevice);$ft++)
	 {
		 echo "<th class='outerth'>".$nameofdevice[$ft]."</th>";
		 
		
	 
	 
	 }
	 echo "</tr>"      //first Row Ends 
	 
	 /*                            FIRST ROW ENDS WRON VALUES             */
	 
	 
	 
	 /*                              SECOND ROW START        */
	 
	?> 
	
	
	 
	 
	 
	 
	 </tr><tr class='secondrow' >
           <td class='maintd neww'>
		   <table class='inner'><tr><td class='innertd'>Date</td><td class= 'innertd'>&nbsp;Time</td></tr></table>
		   
		   </td>
		   
		   <?php 
     for($i=0;$i<count($nameofdevice);$i++)
	 {     
           $mgb=array();
           $mgb2=array();
           $cas=0;
            $printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select min,max,parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
				          $mgb[$o-1] = $rowss['min'];
						 $mgb2[$o-1] = $rowss['max'];
						 
					}
				      
			}  
			  //print_r($printpara);
			  
			  
			  
			  
 
           echo "<td class='maintd'>
		   
		   <table class='inner'><tr>";
	
		           
		    for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>".$printpara[$ins]."&nbsp;</td>";
				
				
			}
		 
		 
		 
		 echo "</tr></table>";
		 echo "</td>";
		 
		 
	 
	 
	 
	 }
	 
	
	 
	?>
		   
		   

</tr>

<tr class='secondrow' >
           <td class='maintd'>
		   <table class='inner'><tr><td class='innertd'>Min /</td><td class= 'innertd'> &nbsp;Max</td></tr></table>
		   
		   </td>

<?php
for($i=0;$i<count($nameofdevice);$i++)
	 {     
           $mgb=array();
           $mgb2=array();
           $cas=0;
            $printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select min,max,parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
				          $mgb[$o-1] = $rowss['min'];
						 $mgb2[$o-1] = $rowss['max'];
						 
					}
				      
			}  
			
			
			echo "<td class='maintd'>
		   
		   <table class='inner'><tr>";
	
		           
		    for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>(".$mgb[$ins]."/" .$mgb2[$ins].")&nbsp;</td>";
				
				
			}
		 
		 
		 
		 echo "</tr></table>";
		 echo "</td>";
			
			
			
			
			
			
			
	 }		
			
			
?>			

















<?php           

           /*                          3rd and FOURT row              */
		   
		    /*      Fourth row code   */


$orgDate=$new_dateFrom;
$todate= $new_dateTo;

$nodataflag=0;
$wws =0;
 $wrongDate=array();
 $wrongTime=array();
$ii=0;
while($wws < 1 )
{
	for($i=0;$i<count($nameofdevice);$i++)
		 {
					 
					 
					 
					    
		          $printparas=array();
              
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			   {
				$printparas[$o-1]=$finalarr[$i][$o];
			   } 
                  				
				
					$minn=0;
					$maxx=0;
                     
				
					 
                  for($pa=0;$pa<count($printparas);$pa++)
				  {
					  
					  $seq="select min,max from device where uid='$deviceId[$i]' and 
					  pcode='$printparas[$pa]'";
					  $re=mysqli_query($connection,$seq);
					  
					  


    
                   
					  
					  while($row = mysqli_fetch_assoc($re))
					  {
						 $minn = $row['min'];
						 $maxx = $row['max'];
						  
					  }
					  
					  
					  
					  
					  $sel ="select date,time, value from livdev
					  
					   where devid='$deviceId[$i]' and 
					   pcode ='$printparas[$pa]' and
					   date ='$orgDate'          and 
					   (value <= '$minn' or value >= '$maxx') 
					       order by time   ";
						   
						    

                      

					   
					  $resl = mysqli_query($connection,$sel);
					  
					  if(mysqli_num_rows($resl))
					  {
						  while ($row = mysqli_fetch_assoc($resl))
						  {
							  $wrongDate[$ii]= $row['date'];
							  $wrongTime[$ii]= $row['time'];
							  
							  $wws =1;
							 
							  $ii++;
						  }
						  
						  
					  }
					  else{
						  
						  //Handle condition;
					  }
					  
					  
					  
				  }					  
					  

             

					 
					 
		 }	
          
		  		 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
					 $date->add(new DateInterval('P1D'));
   $orgDate = $date->format('Y.m.d');
   
   if($orgDate > $todate)
   {
	   $nodataflag=1;
	   break;
   }
		  

}

$interna=0;
if ($wws==0)
{
   //	echo "No data for out of range values for given dates ";
$interna =1;
	
}	


else
{




$fourthTime = min($wrongTime);

//echo $fourthTime ;

$ind=array_search($fourthTime,$wrongTime);
$fourthDate = $wrongDate[$ind];

}




 

 $orgDate=$fourthDate;
 $todate = $new_dateTo;
 $previous = $fourthTime;
   
 
 
 
 
 
 $dyt=true; 
 $odate=0;
 $otime=0;

 while($orgDate <= $todate)
 {
	 
	 
	 
	 
	 
	 $skiprow=1;
	 
	 
	    //main td 3rd row
		   
		$eachpu=array();
       $prinin	= 0;	
	for($i=0;$i<count($nameofdevice);$i++)   {
		   
		   
		     $printparas=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			   {
				$printparas[$o-1]=$finalarr[$i][$o];
			   } 
                  				
				
					$minn=0;
					$maxx=0;
					
					
					
			for($pa=0;$pa<count($printparas);$pa++)  {
					 
					 
					 
					 
					
					   $seq="select min,max from device where uid='$deviceId[$i]' and 
					  pcode='$printparas[$pa]'";
					  $re=mysqli_query($connection,$seq);
					  
			          while($row = mysqli_fetch_assoc($re))
					  {
						 $minn = $row['min'];
						 $maxx = $row['max'];
						  
					  }
					  
					  
					  
					  
					  $sel ="select date,time, value from livdev
					  
					   where devid='$deviceId[$i]' and 
					   pcode ='$printparas[$pa]' and
					   date ='$orgDate'          and 
					   (time > '$previous' and time <= '$next') and
					   (value <= '$minn' or value >= '$maxx') 
					       order by time limit 1  ";
			 
			 
			    
			 
			          $rs=mysqli_query($connection,$sel);
					  
					  if(mysqli_num_rows($rs))
					  {
						  $skiprow = 0;
						   
							while($row = mysqli_fetch_assoc($rs))
							{
								
								array_push($eachpu,$row['value']);
								//echo "<br>".$row['value'];
								$odate = $row['date'];
								$otime = $row['time'];
								
								
								//echo "<br>".$otime;
							}								
							  
						
						 
					  }
			 
		                 else
						 {
							 array_push($eachpu,' --.-- &nbsp;');
							 
						 }							 
			 
			 
			 
			 
			}
			
	}         //end of no of device       
	
	       if($skiprow == 0)
		   {
			?>
				               
			<tr class='third  <?php if(
				 ( ($new_dateTo == $fourthDate) && ($fourthTime >= $offset) )
				  ||
				 ( ($new_dateFrom == $fourthDate) && ($fourthTime < $offset) )
				 ||( $new_dateFrom != $fourthDate)
			 )
			 {
				 echo "offsethide";  
			 } else 
			 echo ""; 
	  
			  ?>' > <?php echo "
				<td class='maintd'>
				<table class='inner'><tr>
				<td class='innertd'>".makedate($fourthDate)."</td>
				<td class= 'innertd'>&nbsp;  ".$fourthTime."</td>
				</tr></table>
				
				</td>"; 
				   
				   
				   
				   
			    for($i=0;$i<count($nameofdevice);$i++) {
					
						echo "<td class='maintd'>";
		                echo "
								<table class='inner'>";
								
								echo "<tr>";
		                  
								$printparas=array();
								// echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			   {
				$printparas[$o-1]=$finalarr[$i][$o];
			   } 
		  
			     for($pa=0;$pa<count($printparas);$pa++)
					 
					 {
						 
				
							
						echo " <td class= 'innertd'>
						&nbsp; ".$eachpu[$prinin]."&nbsp;</td>";
						$prinin++;
						
					 }
			   
			  
		   
		         
			   
			           echo " </tr>";
			   
				      echo  "</table></td>";
				}
		   
		            
		          	   $fourthDate=$odate;
	                   $fourthTime =$otime;
		   
		   
		   
		   	 echo "</tr>";    //main row ends
		   }      //If ends
				
	   

	 
	 
	 
	        	   $previous = $next;
			    $next = strtotime($next);
 
              $next=date("H.i",strtotime('+'.$interval.'minutes',$next));
			  
								   if ( $previous >= $next )
					 {
						 
						 $date = DateTime::createFromFormat('Y.m.d', $orgDate);
						 $date->add(new DateInterval('P1D'));
						 $orgDate= $date->format('Y.m.d');
						 
						 
					 }
	 
	 

	 
	  
 } //while ends	   
	   
	
 
 


 






	 
	 
	 
	 
	 
	 
?>

</table>

</div>     <!--   //reports  clss this wraps    -->

<p><?php  if($interna == 1) echo "No data for out of range values for given dates "; ?></p>

<?php
}
echo "<div class='wrapper' mydiv>";


	        /*              STATS TABLESSSS          */

            
   echo " <caption><h2>Summery Report</h2> </caption>  <table class='outer'>
   
   
   <tr class='firstrow'>

  <th class='outerth outerthtwo'>Sensor name-> </th>";
     for($ft=0;$ft<count($nameofdevice);$ft++)
	 {
		 echo "<th class='outerth'>".$nameofdevice[$ft]."</th>";
		 
		
	 
	 
	 }

  echo "</tr>";
  
/* second row  */
echo "<tr class='secondrow'>
<td class='maintd'>Parameters</td>"; 


       for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
					$printpara=array();
              // echo count($finalarr[$i]);
              for($o=1;$o<=count($finalarr[$i])-1;$o++)
			  {
				$pc=$finalarr[$i][$o];
          		$bsql="select parameter from device where uid='$deviceId[$i]' and
				   
				           pcode='$pc' limit 1 ";
				  
			  

                    $result=mysqli_query($connection,$bsql);
					while($rowss=mysqli_fetch_assoc($result))
					{
						$printpara[$o-1]=$rowss['parameter'];
						
					}
				
			}  
			
			
			for($ins=0;$ins<count($printpara);$ins++)
			{
				echo "<td class='innertd'>".$printpara[$ins]."</td>";
				
				
			}

                   echo "</tr></table></td>";


	   }
echo "</tr>";  //secondrow

/*      3rd time   MINMUM value */





echo "<tr class='secondrow'>
<td class='maintd'>Minimum</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $minva ="select min(value) from livdev where devid='$deviceId[$i]' 
			         and pcode='$myparra[$j]' and date between  
			        '$new_dateFrom' and '$new_dateTo' ";

                        
                       $minresult=mysqli_query($connection,$minva);
					   
					    if(mysqli_num_rows($minresult))
						{
							
							while($row = mysqli_fetch_assoc($minresult))
							{
								
								echo "<td class='innertd'>&nbsp;".$row['min(value)']."&nbsp;
								
								
								</td>";
								
							}
							
							
						} else {
							
							echo "<td class='innertd'>0</td>";
							
						}


               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr>";  // THIRD ROW  


/*           FOURTH ROW  MAX value             */      

echo "<tr class='secondrow'>
<td class='maintd'>Maximum</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $minva ="select max(value) from livdev where devid='$deviceId[$i]' 
			         and pcode='$myparra[$j]' and date between  
			        '$new_dateFrom' and '$new_dateTo' ";

                        
                       $minresult=mysqli_query($connection,$minva);
					   
					    if(mysqli_num_rows($minresult))
						{
							
							while($row = mysqli_fetch_assoc($minresult))
							{
								
								echo "<td class='innertd'>&nbsp;".$row['max(value)']."&nbsp;
								
								
								</td>";
								
							}
							
							
						} else {
							
							echo "<td class='innertd'>0</td>";
							
						}


               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr>";  // fourth Row 



 /*          AVERAGE VALLUESS                     */
 
 
 echo "<tr class='secondrow'>
<td class='maintd'>Average</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		   
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $minva ="select avg(value) from livdev where devid='$deviceId[$i]' 
			         and pcode='$myparra[$j]' and date between  
			        '$new_dateFrom' and '$new_dateTo' ";

                        
                       $minresult=mysqli_query($connection,$minva);
					   
					    if(mysqli_num_rows($minresult))
						{
							
							while($row = mysqli_fetch_assoc($minresult))
							{
								
								echo "<td class='innertd'>&nbsp; ".round($row['avg(value)'],2)."&nbsp;
								
								
								</td>";
								
							}
							
							
						} else {
							
							echo "<td class='innertd'>0</td>";
							
						}


               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr>"; // 5th row ends


/*                            mkt here   */

 echo "<tr class='secondrow'>
<td class='maintd'>MKT</td>";

      for($i=0;$i<count($deviceId);$i++){
		   
		        $pcheck = 0;
		         echo "<td class ='maintd'>
				    <table class='inner'>
					<tr>";
					 
			     
				 for($mp=0;$mp<count($finalarr[$i])-1;$mp++)
					 {
						 
						 $myparra[$mp]=$finalarr[$i][$mp+1];
						 
					 }
					 
					 for($j=0;$j<count($myparra);$j++){
					 
					 
					 $mkt ="select pcode,value from livdev where devid='$deviceId[$i]' 
			              and pcode='$myparra[$j]' and date between 
			              '$new_dateFrom' and '$new_dateTo' ";
					
					
					//echo "<br>".$mkt;
                          
                        
                        $mktarray=array();
						$mk=0;
						$mktres=mysqli_query($connection,$mkt);
						 $valco=mysqli_num_rows($mktres);
						 
						 
						 
						 if(mysqli_num_rows($mktres))
					{
						 while($mktrow=mysqli_fetch_array($mktres))
						 {
							 $mktarray[$i][$mk]=$mktrow['value'];
							 $mktarray[$i][$mk]=$mktarray[$i][$mk]+273.15;
							 $pcheck =  $mktrow['pcode'];
							 
							// echo $pcheck;
							 $mk++;
							 
						 }
						
						
					}

                
					else
					{
						//echo "error in mkt".$mkt.mysqli_error($connection);
					}


                             $sum=0;
                     for($s=0;$s<count($mktarray[$i]);$s++)
					 {
						 
						 $sum=exp((-83.144)/(8.314472*$mktarray[$i][$s])) +$sum;
						 
					 }
						 $delh=$sum/$valco;
						 $meankt=-log($delh);
						 $ktink=10/$meankt;
						 $indeg=round($ktink-273.15,2);


                          if( $pcheck == '11')
						  {
							  
							  echo "<td class='innertd'>
							  &nbsp;" .$indeg." &nbsp;</td>";
							  
						  }
                           
						   else{
							   
							   echo "<td class='innertd'>&nbsp;--
							   
							   &nbsp;
							   </td>";
							   
						   }
                       



               
			   
					 }   //per parameter loop ends
				 
				 

                   echo "</tr></table></td>";


	   }
echo "</tr></table>"; // 5th row ends

  



/*                  STATS TABLE ENDS           */








echo "</div>";

/***********************EDIT HERE*********************************
 GRAPHSSSS

***************************************************************************/ ?>



<?php


/*                                   


global variable declaration

*/

$p1values=array();
$p1dataTime=array();

$p2values=array();
$p2dataTime=array();

$p3values=array();
$p3dataTime=array();

$p4values=array();
$p4dataTime=array();

$p5values=array();
$p5dataTime=array();

$p6values=array();
$p6dataTime=array();

$p7values=array();
$p7dataTime=array();

$p8values=array();
$p8dataTime=array();










    $newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='11' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdT=array_values(array_intersect($deviceId,$newids));
  $comparedNameT=array_values(array_intersect($nameofdevice,$newlist));
         
$darr=array();
$darr=array();
$darr=$comparedIdT;
if (count($darr) == 0)
{
	$values = array(0);
	$dataTime = array(0);
	
}

else { 				

			
					
					
	/*********                     TEMPERATURE      GOTO11        ********************/
	
for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='11' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='11' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					  
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $values[$i][$variV] = $drow['value'];
					   $dataDate[$i][$variV]  =  makedate($drow['date']);
					   $dataTime[$i][$variV]  = $dataDate[$i][$variV]." - ".$drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
}   // NO of device counts;
	
}   //else ends
    
	
 
  /* *****                             TEMP block ends  *****    
  
  
  
  
                                                                      */


  
  /*                                HUMIDY BLOCK goto12                   */
  
  
  
  $newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='12' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdH=array_values(array_intersect($deviceId,$newids));
  $comparedNameH=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdH; 

 if (count($darr) == 0)
{
	$hvalues = array(0);
	$hdataTime = array(0);
	
}
else
  
  {
  
  
  
  
  
  
  
  
  for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='12' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='12' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $hvalues[$i][$variV] = $drow['value'];
					   $hdataDate[$i][$variV]  =  makedate($drow['date']);
					   
					   $hdataTime[$i][$variV]  = $hdataDate[$i][$variV]." - ".$drow['time'];
					 //  echo "first time here";
                     
				    }
                    
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
}   // NO of device counts;


  } // else ends
	

/*                                         Humidity block Ends */



    /*                            p1 block starts                                                   */
	
	$newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='13' ";
  $inresult = mysqli_query($connection,$inter);
  $abcs=0;
  while($row = mysqli_fetch_assoc($inresult))
  {  
	 array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	 // $newlist[$abcs] = $row['name'];
	  //$$row[$abcs]   = $row['uid'];
  }
  
  
  $comparedIdP1=array_values(array_intersect($deviceId,$newids));
  $comparedNameP1=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP1;  	


if (count($darr) == 0)
{
	$p1values = array(0);
	$p1dataTime = array(0);

	
}

else  {
	
	
	
	
	
	
	
	
	
	 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='13' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='13' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p1values[$i][$variV] = $drow['value'];
					   $p1dataDate[$i][$variV]  = makedate($drow['date']);
					   $p1dataTime[$i][$variV]  = $p1dataDate[$i][$variV]." - ". $drow['time'];
					 //  echo "first time here";
					   
				    }
                //    print_r($p1dataTime);
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
}   // NO of device counts;

} //else ends 	
	
	
	/*                            P1 block Ends                             */


    



    /*                            p2 starts                                 */
	
	
	
	$newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='14' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdP2=array_values(array_intersect($deviceId,$newids));
  $comparedNameP2=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP2;  	

if (count($darr) == 0)
{
	$p2values = array(0);
	$p2dataTime = array(0);
	
}


else{
	
	
	
	
	
	
	
	
	 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='14' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='14' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p2values[$i][$variV] = $drow['value'];
					   $p2dataDate[$i][$variV]  =  makedate($drow['date']);
					   $p2dataTime[$i][$variV]  = $p2dataDate[$i][$variV]." - " .$drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
} 
	
} //else ends	
	
	
	/*                   p2 ends                                             */
	
	
	
	/*                p3      start                                          */
	
	
	
		 $newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='15' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdP3=array_values(array_intersect($deviceId,$newids));
  $comparedNameP3=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP3;  	

if (count($darr) == 0)
{
	$p3values = array(0);
	$p3dataTime = array(0);
	
}


else{
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='15' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='15' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p3values[$i][$variV] = $drow['value'];
					   $p3dataDate[$i][$variV]  =  makedate($drow['date']);
					   $p3dataTime[$i][$variV]  = $p3dataDate[$i][$variV]." - " .$drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
} 
	
} // p3 else ends	
	
	
	
	/*               p3      ends                                              */
	
	
	/*               p4      start                                              */
	
	
	
	$newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='16' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdP4=array_values(array_intersect($deviceId,$newids));
  $comparedNameP4=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP4;  	

if (count($darr) == 0)
{
	$p4values = array(0);
	$p4dataTime = array(0);
	
}


else{
	
	
	
	
	
	
	
	
	
	
	
	
	 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='16' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='16' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p4values[$i][$variV] = $drow['value'];
					   $p4dataDate[$i][$variV]  =  makedate($drow['date']);
					   $p4dataTime[$i][$variV]  = $p4dataDate[$i][$variV]." - " .$drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
}   // NO of device counts;

}  //p4else ends
	
	
	
	/*               p4      ends                                              */
	
	
	
	
	
	
	
	
		/*               p5      start                                              */
		
		
		
		
		$newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='17' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdP5=array_values(array_intersect($deviceId,$newids));
  $comparedNameP5=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP5;  	

if (count($darr) == 0)
{
	$p5values = array(0);
	$p5dataTime = array(0);
	
}


else{
		
		
		
	 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='17' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='17' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p5values[$i][$variV] = $drow['value'];
					   $p5dataDate[$i][$variV]  =  makedate($drow['date']);
					   $p5dataTime[$i][$variV]  =$p5dataDate[$i][$variV] ." - ". $drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
} 	
		
}  //p5 else ends	
		
		
	/*               p5      ends                                              */	
		
		
		
		
/*               p6      start                                              */


$newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='18' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdP6=array_values(array_intersect($deviceId,$newids));
  $comparedNameP6=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP5;  	

if (count($darr) == 0)
{
	$p6values = array(0);
	$p6dataTime = array(0);
	
}


else{



 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='18' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='18' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p6values[$i][$variV] = $drow['value'];
					   $p6dataDate[$i][$variV]  =  makedate($drow['date']);
					   $p6dataTime[$i][$variV]  =  $p6dataDate[$i][$variV] . " - ".$drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
}   // NO of device counts;

} //p6 ends else







/*               p6      ends                                              */




/*               p7      start                                              */



$newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='19' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdP7=array_values(array_intersect($deviceId,$newids));
  $comparedNameP7=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP5;  	

if (count($darr) == 0)
{
	$p7values = array(0);
	$p7dataTime = array(0);
	
}


else{
	


 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='19' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='19' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p7values[$i][$variV] = $drow['value'];
					   $p7dataDate[$i][$variV]  =  makedate($drow['date']);
					   $p7dataTime[$i][$variV]  = $p7dataDate[$i][$variV]  . " - " .$drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
}   // NO of device counts;

}  //p7 else ends

/*               p7      ends                                              */




/*               p8      ends                                              */





$newlist=array();
  $newids=array();
  $inter="select name,uid from device where pcode ='20' ";
  $inresult = mysqli_query($connection,$inter);
  while($row = mysqli_fetch_assoc($inresult))
  {
	  array_push($newlist,$row['name']);
	   array_push($newids,$row['uid']);
	  
	  
  }
  
  
  $comparedIdP8=array_values(array_intersect($deviceId,$newids));
  $comparedNameP8=array_values(array_intersect($nameofdevice,$newlist));
  
         
$darr=array();
$darr=$comparedIdP5;  	

if (count($darr) == 0)
{
	$p8values = array(0);
	$p8dataTime = array(0);
	
}


else{
	


 for($i=0;$i<count($darr);$i++)      //loop for no of device  Change Here
{



	
	$orgDate=$new_dateFrom;
	$todate=$new_dateTo;
	
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);
$date->add(new DateInterval('P1D'));

$datecounter= $date->format('Y.m.d');
$plt='00.00.00';
$variV=0;
 $cc=0;
 
while($orgDate <= $todate){
$ctflag1=0;
 $ctflag2=0;
// echo "<br>".$todate."<br>".$orgDate."<br>";
	
	$date = DateTime::createFromFormat('Y.m.d', $orgDate);

	         //echo "<br>Top".$plt;
			 
			 
			  $dateex="select date,value from livdev where devid='$darr[$i]' and pcode='20' 


          			and date ='$orgDate'";
					
					$exres=mysqli_query($connection,$dateex);
					
					
					if(mysqli_num_rows($exres))
					{
						//echo "atleast";
					}
					else
					{
						//echo "<br>gettoknow";
						$ctflag1=1;
					}
			     
				  if($ctflag1 == 1)
				  {
					  //echo "<br>flags";
					  $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					  continue;
				  }
			 
			 
			 
	           $dsql= "select date,value,time from livdev 
			   where devid='$darr[$i]' and time > '$plt' and date ='$orgDate'
			   and pcode='20' order by 
			   date,time ASC limit 1";
			   $dresult=mysqli_query($connection,$dsql);
			 //  echo "<br>".$dsql;
			  
			   if(mysqli_num_rows($dresult) == 1)
			   {
				   
				  // echo "success <br>";
				   while($drow=mysqli_fetch_assoc($dresult))
				    {   
					  
					   
					   // echo "<br>&nbsp;Date&nbsp;&nbsp;&nbsp;&nbsp;".$drow['date']."&nbsp;
					   // &nbsp;&nbsp;". $drow['time'];
					   
					   $dtime[$i]=$drow['time'];
					   //echo $dtime[$i];
					   $dday[$i] =$drow['date'];
					   $p8values[$i][$variV] = $drow['value'];
					   $p8dataDate[$i][$variV]  =  makedate($drow['date']);
					   $p8dataTime[$i][$variV]  = $p8dataDate[$i][$variV] . " - " .$drow['time'];
					 //  echo "first time here";
					   
				    }
				   
				 $plt1=date("H.i.s",strtotime('+ '.$interval.'minutes',strtotime($dtime[$i])));	
				 
				   //echo "<br>hhhh".$plt1;
				   if($plt1 < $dtime[$i] )
				   {
					   
					   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   //echo $orgDate;
					   $plt='00.00.00';
					   //echo"<br>".
					   //echo "ifsss";
				   }
				   else
				   {
					   $plt = $plt1;
					  // echo "else";
				   }
				   
				  
				   
			  }
			  else{
				    $cc++;
				  // echo "neer here".$cc;
				   $date->add(new DateInterval('P1D'));
					   $orgDate= $date->format('Y.m.d');
					   $plt='00.00.00';
					   //echo "<br>".$orgDate;
					   continue;
			   }
			  // echo "<br>i am hitting here <br>".$orgDate; 
			   $variV++;
			  
		          //while looped main of date condition
}
			   
						
	            
	
	
	
	
}   // NO of device counts;

} // p8  else ends

/*               p8     ends                                              */





 
?>
<div class="chart-container">
 <h2 class='center'>Graph Report</h2>
 </div>
<div class='global-contain'>
   
<div class="chart-container">
      <canvas id="11" class='hides'></canvas>

    </div>
	
	
	 <div class="chart-container">
      <canvas id="12"  class='hides'></canvas>
	  
    </div>
	
	
	
		 <div class="chart-container">
      <canvas id="13" class='hides'></canvas>
	  
    </div>
	
	
		 <div class="chart-container">
      <canvas id="14" class='hides'></canvas>
	  
    </div>
	
		 <div class="chart-container">
      <canvas id="15" class='hides'></canvas>
	  
    </div>
	
		 <div class="chart-container">
      <canvas id="16" class='hides'></canvas>
	  
    </div>
	
		 <div class="chart-container">
      <canvas id="17" class='hides'></canvas>
	  
    </div>
	
		 <div class="chart-container">
      <canvas id="18" class='hides'></canvas>
	  
    </div>
	
		 <div class="chart-container">
      <canvas id="19" class='hides'></canvas>
	  
    </div>
	
	
		 <div class="chart-container">
      <canvas id="20" class='hides'></canvas>
	  
    </div>
	
	
	
	
	</div>
	<div class='sign'>
	    
<h2>Remark:</h2><textarea  rows="4" cols="50">  </textarea >	

<h5><i>Digital Signature</i>	</h5>

<b> <u><?php echo $nameofuser; ?></u>&nbsp;(<?php echo $glousername; ?> )  .<br> 
<u><?php echo $desi; ?>,<?php echo $role; ?> ,<?php echo $department; ?> </u></b>

<br>


<?php echo date('d.m.Y'); ?> | <?php echo date('H.i'); ?> GMT + 5.30<br>
<button class='logoim' onclick="printm()"><img src='img/print.png' width='50px' height='50px' ></button>

	
	</div>


    <!-- javascript -->

	<script src="vendor/chart.js/Chart.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

	</body>
	</html>
	
	
	<script>
	/*** turn off timefilter rows
 * 
 * 
 * 
 * 
 */


		$('.offsethide').hide();
	// Display graph main switcv graphs
	
	$(':checkbox').change('click',function(){
	
	$('.global-contain').toggle();
	
	});
	
	
	
	
	 var wantalarm = '<?php echo $wantalarm ; ?>';
	  
	  if(wantalarm == 'no')
	  {
	     // $('.alarm').hide();
	      
	      
	  }
	
	
	
	
				var plist=[];
				plist=<?php echo json_encode($plist); ?>;
				
				var uniqueNames = [];
				
				
				$.each(plist, function(i, el){
					if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);
				});
				
				
				
				
				
				var tbval=[];
				var tbtime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameT); ?>;
				
				
                
				 tbval=<?php echo json_encode($values); ?>;
				  tbtime=<?php echo json_encode($dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				  
				  if (tbval === null)
				  {
				      tbval =0;
				  }
				 
				   if(tbtime === null)
				   
				   {
				       
				      tbtime=0; 
				   }
				 
                
                   
				 
				var val = [];
                var timevar = [];
				var val2=[];
				
			
				
	
	  
	  
	  
	  
                
                
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  },

};
				
    			var chartdata = {
        labels: tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameT);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
	
          
        ],
		
      };
	  
	  
	  
	  /*                           END of TEMP         */
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  /*                             START of HUMIDITY         */




	  
	              var htbval=[];
				var htbtime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameH); ?>;
				
                 
                
				 htbval=<?php echo json_encode($hvalues); ?>;
				  htbtime=<?php echo json_encode($hdataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				  if (htbval === null)
				  {
				      htbval =0;
				  }
				 
				   if(htbtime === null)
				   
				   {
				       
				      htbtime=0; 
				   }
				 
				
				 
				var hval = [];
                var htimevar = [];
				var hval2=[];
				
			
				
	
	  
	  
	  
	  
			
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
	
    			var chartdata2 = {
        labels: htbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameH);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: htbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
		
          
        ],
		
      };
	 
       /*                       END OF HUMIDTY         */


	  /*                             START of p1         */




	  
	              var p1tbval=[];
				var p1btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP1); ?>;
				
				 
				 p1tbval=<?php echo json_encode($p1values); ?>;
				  p1tbtime=<?php echo json_encode($p1dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				  if (p1tbval === null)
				  {
				      p1tbval =0;
				  }
				 
				   if(p1tbtime === null)
				   
				   {
				       
				      p1tbtime=0; 
				   }
				 
				
                  
				var p1val = [];
                var p1timevar = [];
				var p1val2=[];
				
			
				
	
	  
               
	  
	  
				
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
			
    			var chartdata3 = {
                    labels: p1tbtime[0],  
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP1);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p1tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
	
          
        ],
		
      };
	 
       /*                       END OF p1         */

	   
	  
	  
	  /*                             START of p2         */




	  
	              var p2tbval=[];
				var p2btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP2); ?>;
				
				 
				 p2tbval=<?php echo json_encode($p2values); ?>;
				  p2tbtime=<?php echo json_encode($p2dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				   if (p2tbval === null)
				  {
				      p2tbval =0;
				  }
				 
				   if(p2tbtime === null)
				   
				   {
				       
				      p2tbtime=0; 
				   }
				 
				
				 
				var p2val = [];
                var p2timevar = [];
				var p2val2=[];
				
			
				
	
	  
	  
	  
	  
				
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
		
    			var chartdata4 = {
        labels: p2tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP2);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p2tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
	
          
        ],
		
      };
	 
       /*                       END OF p2         */
	   
	   
	   
	   
	   
	   
	   
	    /*                             START of p3        */




	  
	              var p3tbval=[];
				var p3btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP3); ?>;
				
				 
				 p3tbval=<?php echo json_encode($p3values); ?>;
				  p3tbtime=<?php echo json_encode($p3dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				  if (p3tbval === null)
				  {
				      p3tbval =0;
				  }
				 
				   if(p3tbtime === null)
				   
				   {
				       
				      p3tbtime=0; 
				   }
				 
				 
				
				 
				var p3val = [];
                var p3timevar = [];
				var p3val2=[];
				
			
				
	
	  
	  
	  
	  
				
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
			
    			var chartdata5 = {
        labels: p3tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP3);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p3tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
	
          
        ],
		
      };
	 
       /*                       END OF p3        */
	   
	   
	    /*                             START of p4        */




	  
	              var p4tbval=[];
				var p4btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP4); ?>;
				
				 
				 p4tbval=<?php echo json_encode($p4values); ?>;
				  p4tbtime=<?php echo json_encode($p4dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  if (p4tbval === null)
				  {
				      p4tbval =0;
				  }
				 
				   if(p4tbtime === null)
				   
				   {
				       
				      p4tbtime=0; 
				   }
				 
				 
				
				 
				var p4val = [];
                var p4timevar = [];
				var p4val2=[];
				
			
				
	
	  
	  
	  
	  
				
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
		
    			var chartdata6 = {
        labels: p4tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP4);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p4tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
	
          
        ],
		
      };
	 
       /*                       END OF p4        */
	   
	   
	   
	    /*                             START of p5        */




	  
	              var p5tbval=[];
				var p5btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP5); ?>;
				
				
				 p5tbval=<?php echo json_encode($p5values); ?>;
				  p5tbtime=<?php echo json_encode($p5dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  if (p5tbval === null)
				  {
				      p5tbval =0;
				  }
				 
				   if(p5tbtime === null)
				   
				   {
				       
				      p5tbtime=0; 
				   }
				 
				 
				
				 
				var p5val = [];
                var p5timevar = [];
				var p5val2=[];
				
			
				
	
	  
	  
	  
	  
				
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
			
    			var chartdata7 = {
        labels: p5tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP5);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p5tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
		
          
        ],
		
      };
	 
       /*                       END OF p5       */
	   
	   
	   
	    /*                             START of p6        */




	  
	              var p6tbval=[];
				var p6btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP6); ?>;
				
				 
				 p6tbval=<?php echo json_encode($p6values); ?>;
				  p6tbtime=<?php echo json_encode($p6dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				  if (p6tbval === null)
				  {
				      p6tbval =0;
				  }
				 
				   if(p6tbtime === null)
				   
				   {
				       
				      p6tbtime=0; 
				   }
				 
				 
				
				 
				var p6val = [];
                var p6timevar = [];
				var p6val2=[];
				
			
				
	
	  
	  
	  
	  
				
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
			
    			var chartdata8 = {
        labels: p6tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP6);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p6tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
	
          
        ],
		
      };
	 
       /*                       END OF p6       */
	   
	   
	   
	    /*                             START of p7        */




	  
	              var p7tbval=[];
				var p7btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP7); ?>;
				
				 
				 p7tbval=<?php echo json_encode($p7values); ?>;
				  p7tbtime=<?php echo json_encode($p7dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				  if (p7tbval === null)
				  {
				      p7tbval =0;
				  }
				 
				   if(p7tbtime === null)
				   
				   {
				       
				      p7tbtime=0; 
				   }
				 
				 
				
				 
				var p7val = [];
                var p7timevar = [];
				var p7val2=[];
				
			
				
	
	  
	  
	  
	  
			
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
		
    			var chartdata9 = {
        labels: p7tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP7);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p7tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>

          
        ],
		
      };
	 
       /*                       END OF p7       */
	   
	   
	   
	   /*                             START of p8        */




	  
	              var p8tbval=[];
				var p8btime=[];
				var colorsarray=[];
				var namelist=<?php echo json_encode($comparedNameP8); ?>;
				
				
				 p8tbval=<?php echo json_encode($p8values); ?>;
				  p8tbtime=<?php echo json_encode($p8dataTime); ?>;
				  colorsarray= <?php echo json_encode($colorsarray);?>;
				  
				  if (p8tbval === null)
				  {
				      p8tbval =0;
				  }
				 
				   if(p8tbtime === null)
				   
				   {
				       
				      p8tbtime=0; 
				   }
				 
				 
				
				 
				var p8val = [];
                var p8timevar = [];
				var p8val2=[];
				
			
				
	
	  
	  
	  
	  
			
				var options = {
  bezierCurve : false,
  animation: {
    onComplete: done
  }
};
			
			
    			var chartdata10 = {
        labels: p8tbtime[0],
		
		
        datasets: [
        <?php for($n=0;$n<count($comparedNameP8);$n++){ echo '{
            label: namelist['.$n.'],
            fill: false,
            lineTension: 0.1	,
            backgroundColor: colorsarray['.$n.'],
            borderColor: colorsarray['.$n.'],
            pointHoverBackgroundColor: colorsarray['.$n.'],
            pointHoverBorderColor: colorsarray['.$n.'],
            data: p8tbval['.$n.']
			//bezierCurve : false
			
          },'; 
		}  ?>
	
          
        ],
		
      };
	 
       /*                       END OF p8       */
	  
	  
	  
	  
	  /* get names of distinct parameters */
    <?php
	  $pri = array();

	  for ($cck = 11;$cck <=20;$cck++) {
		  $sql = "select pcode ,parameter from device where pcode = '$cck' limit 1 ";

  $sres = mysqli_query($connection,$sql);
		  if(mysqli_num_rows($sres) != 0)
		  {
			  while($re = mysqli_fetch_assoc($sres) ) {
				  array_push($pri,$re['parameter']);
			  }
		  } else 
		  {
			 
			array_push($pri,'parameter'); 
		  }
	  }

	  
	  ?>

      var ctx = $("#11");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata,
		options:{title:{display:true,text:'<?php echo $pri[0]; ?>'},
		
		scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[0]; ?>'
		
	  }
    }],
	
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	  
	  
	   var ctx = $("#12");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata2,
		options:{title:{display:true,text:'<?php echo $pri[1]; ?>'},
		
		scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[1]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
	
		
		
		
		
		}
      });
	  
	  
	  
	     var ctx = $("#13");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata3,
		options:{title:{display:true,text:'<?php echo $pri[2]; ?>'},
		
		
		
		scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	 
	  
	        var ctx = $("#14");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata4,
		options:{title:{display:true,text:'<?php echo $pri[3]; ?>'},scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	  
	  
	        var ctx = $("#15");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata5,
		options:{title:{display:true,text:'<?php echo $pri[4]; ?>'},scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	  
	  	        var ctx = $("#16");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata6,
		options:{title:{display:true,text:'<?php echo $pri[5]; ?>'},scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	  	        var ctx = $("#17");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata7,
		options:{title:{display:true,text:'<?php echo $pri[6]; ?>'},scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	  	        var ctx = $("#18");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata8,
		options:{title:{display:true,text:'<?php echo $pri[7]; ?>'},scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	  
	  
	  	        var ctx = $("#19");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata9,
		options:{title:{display:true,text:'<?php echo $pri[8]; ?>'},scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	  	        var ctx = $("#20");

      var LineGraph = new Chart(ctx, {
        type: 'line',
        data: chartdata10,
		options:{title:{display:true,text:'<?php echo $pri[9]; ?>'},scales: {
    yAxes: [{
      scaleLabel: {
        display: true,
        labelString: '<?php echo $pri[2]; ?>'
		   }
    }],
	xAxes: [{
                ticks: {
                    autoSkip: true,
                    maxRotation: 70,
                    minRotation: 70,
					fontSize: 8 ,
					fontColor: 'red' ,
                },
	
            },
		
			{
          afterBuildTicks: scale => scale.ticks = [],
          gridLines: {
            drawOnChartArea: false
                   },
				   

		
			
			}]
  }
		
		
		
		}
      });
	  
	  
	 
	  
	  
	  function done(){
	   
	 }
	 
	 
	 
	 
	 
	 
	/*********             BLOCk for 4  parameter ends Extend this to 10 


                **/	
	 
	 
	 
			</script>
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			<script>
			
			// hiding 
			
			
			var disp ='<?php echo $graphoptn; ?>';
			
			
			
			if( disp == 'orp')
			{
				
				
				$('.chart-container').hide();
			}
			
			if( disp == 'ogrp')
			{
				$('.wrapper').hide();
				
				
				//$('.global-contain').hide();
				var arr1=['11','12','13','14','15','16','17','18','19','20' ];
				
				let difference = arr1.filter(x => !uniqueNames.includes(x));
				
				
				
				for(j=0;j<difference.length;j++)
				{
					$('#'+difference[j]).hide();
					
					
				}
				
			}
			
			if( disp == 'ogrp')
				
				{
					var arr1=['11','12','13','14','15','16','17','18','19','20' ];
					
					let difference = arr1.filter(x => !uniqueNames.includes(x));
					
					for(j=0;j<difference.length;j++)
					{
						$('#'+difference[j]).hide();
						
						
					}
					
				}
			
			
			
			if( disp == 'both'){
				
				
				
				var arr1=['11','12','13','14','15','16','17','18','19','20' ];
					
					let difference = arr1.filter(x => !uniqueNames.includes(x));
					
					for(j=0;j<difference.length;j++)
					{
						$('#'+difference[j]).hide();
						
						
					}
				
				
				
				
			}
			
			
/**hide lastrow */		
let hidelastrow = document.querySelector('.outer tbody');
hidelastrow.lastElementChild.style.display="none";				
			

function printm(){
	
	window.print();
	
	
}

</script>
 



<?php



?>"));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program