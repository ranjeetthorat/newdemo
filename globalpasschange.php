<?php @eval("?>".base64_decode("<?php include('includes/getuserinfo.php'); ?>
<!DOCTYPE html>
<html lang="en">
<title>Clogsoft 5.0</title>
<?php
session_start();
if (!($_SESSION['uloggedin'] == true)) {
    header("location:index.php");
}
$uid = $_SESSION['userlogged'];
if (isset($_POST['fmsbt'])) {

    $current = $_POST['oldpass'];
    $pass = $_POST['p1'];
    $key = $_SESSION["userlogged"];
    $nameU = $_SESSION['nameOfUser'];
    $today = date('Y.m.d');
    $sqls = "select uid,password FROM username where uid ='$key' and password='$current'";
    $resultsss = mysqli_query($connection, $sqls);
    if (!(mysqli_num_rows($resultsss))) {
        echo "<script>alert('current password is not correct .enter correct password');
        
        window.location.href= 'globalpasschange.php';
        
        </script>";
    } elseif ($pass == $current) {
        echo "<script>alert('current password same as Last one.Try different password');
        
    window.location.href= 'globalpasschange.php';
    
    </script>";
    } else {

        $sql = "update username set password='$pass',edate='$today' where uid='$key'";


        $lo = "insert into logdetail (name,userid,type,date,remark)
   
       values ('$nameU','$key','user','$today','Changed Password')";

        $res =  mysqli_query($connection, $lo);

        if (mysqli_query($connection, $sql)) {
            echo "<script>alert('Password changed');";


            echo "setTimeout(function () {
window.location.href= 'userdashboard.php' // the redirect goes here

},200); </script>";
        } else {

            echo "fail";
        }
    }
} //end of post flag


?>

<head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="img/icon.png">

    <title>Clogsoft 5.0</title>

    <!-- Custom fonts for this template-->
    <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">


    <!-- Custom styles for this template-->
    <link href="css/sb-admin-2.min.css" rel="stylesheet">

</head>
<style>
    .overflows {
        overflow-y: scroll;
        height: 700px;

    }

    .centers {
        margin-left: 250px;
    }

    .alignbtn {
        margin-left: 100px;
    }

    h3 {
        margin-left: 100px;
    }
</style>

<body id="page-top">

    <!-- Page Wrapper -->
    <div id="wrapper">

        <!-- Sidebar -->
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <!-- Sidebar - Brand -->
            <a class="sidebar-brand d-flex align-items-center justify-content-center" href="userdashboard.php">
                <div class="sidebar-brand-icon rotate-n-45">
                    <img src="img/icon.png" width="25px" height="25px">
                </div>
                <div class="sidebar-brand-text mx-3">CLOGSOFT 5.0 <sup></sup></div>
            </a>

            <!-- Divider -->
            <hr class="sidebar-divider my-0">

            <!-- Nav Item - Dashboard -->
            <li class="nav-item active">
                <a class="nav-link" href="userdashboard.php">
                    <i class="fas fa-fw fa-tachometer-alt"></i>
                    <span>Dashboard</span></a>
            </li>

            <!-- Divider -->
            <hr class="sidebar-divider">

            <?php $useracess = array();
            $useracess = getAccList($connection, $uid, 'samp');

            ?>


            <?php if (in_array(123, $useracess)) { ?>
                <!-- Nav Item - Charts -->
                <li class="nav-item">
                    <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                        <i class="fas fa-fw fa-cog"></i>
                        <span>DEVICES</span>
                    </a>
                    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionSidebar">
                        <div class="bg-white py-2 collapse-inner rounded">
                            <h6 class="collapse-header">Controls</h6>
                            <a class="collapse-item" href="uaddDevice.php">Add Device</a>
                            <a class="collapse-item" href="ushowDevice.php">Remove Device</a>
                            <a class="collapse-item" href="udeviceList.php">Show Device</a>
                        </div>
                    </div>
                </li>
            <?php } ?>

            <?php if (in_array(125, $useracess)) { ?>

                <li class="nav-item">
                    <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseUtilities" aria-expanded="true" aria-controls="collapseUtilities">
                        <i class="fas fa-fw fa-building"></i>
                        <span>DEPARTMENT</span>
                    </a>
                    <div id="collapseUtilities" class="collapse" aria-labelledby="headingUtilities" data-parent="#accordionSidebar">
                        <div class="bg-white py-2 collapse-inner rounded">
                            <h6 class="collapse-header">Controls</h6>
                            <a class="collapse-item" href="uaddDepart.php">Add New Department</a>
                            <a class="collapse-item" href="ushowDepart.php">Edit Department</a>

                        </div>
                    </div>
                </li>

            <?php } ?>

            <?php if (in_array(122, $useracess)) { ?>
                <li class="nav-item">
                    <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseUser" aria-expanded="true" aria-controls="collapseUser">
                        <i class="fas fa-fw fa fa-user"></i>
                        <span>User</span>
                    </a>
                    <div id="collapseUser" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar">
                        <div class="bg-white py-2 collapse-inner rounded">
                            <h6 class="collapse-header">New</h6>
                            <a class="collapse-item" href="ucreateUser.php">Create User</a>
                            <a class="collapse-item" href="ushowlistu.php">Edit User</a>
                        </div>
                    </div>
                </li>
            <?php } ?>

            <?php if (in_array(120, $useracess)) { ?>
                <li class="nav-item">
                    <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseReport" aria-expanded="true" aria-controls="collapseReport">
                        <i class="fas fa-file-alt"></i>
                        <span>Reports Section</span>
                    </a>
                    <div id="collapseReport" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar">
                        <div class="bg-white py-2 collapse-inner rounded">
                            <h6 class="collapse-header"></h6>
                            <a class="collapse-item" href="userGenReport.php">Generate Report</a>
                            <a class="collapse-item" href="uemailreport.php">Email Report</a>
                        </div>
                    </div>

                </li>
            <?php } ?>
            <?php if (in_array(126, $useracess)) { ?>
                <li class="nav-item">
                    <a class="nav-link" href="personalprofileupdate.php">
                        <i class="fas fa-fw fa-table"></i>
                        <span>Profile Update</span></a>
                </li>
            <?php } ?>
            <?php if (in_array(121, $useracess)) { ?>
                <li class="nav-item">
                    <a class="nav-link" href="usertrail.php">
                        <i class="fas fa-fw fa-table"></i>
                        <span>Audit</span></a>
                </li>
            <?php } ?>
            <li class="nav-item">
                <a class="nav-link" href="globalpasschange.php">
                    <i class="fas fa-key"></i>
                    <span>Change Password</span></a>
            </li>

            <li class="nav-item">
                <a class="nav-link" href="help.php">
                    <i class="fas fa-fw fa-table"></i>
                    <span>Help</span></a>
            </li>
            <!-- Sidebar Toggler (Sidebar) -->
            <div class="text-center d-none d-md-inline">
                <button class="rounded-circle border-0" id="sidebarToggle"></button>
            </div>

        </ul>
        <!-- End of Sidebar -->

        <!-- Content Wrapper -->
        <div id="content-wrapper" class="d-flex flex-column">

            <!-- Main Content -->
            <div id="content">

                <!-- Topbar -->
                <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

                    <!-- Sidebar Toggle (Topbar) -->
                    <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
                        <i class="fa fa-bars"></i>
                    </button>
                    <span><img src='img/logo.jpg' height="70px" width="150px"></span>

                    <!-- Topbar Search 
          <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
            <div class="input-group">
              <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
              <div class="input-group-append">
                <button class="btn btn-primary" type="button">
                  <i class="fas fa-search fa-sm"></i>
                </button>
              </div>
            </div>
          </form>
              
          -->
                    <!-- Topbar Navbar -->
                    <ul class="navbar-nav ml-auto">


                        <div class="topbar-divider d-none d-sm-block"></div>
                        <?php $userinfo = getUserInfo($connection, $_SESSION['userlogged']); ?>
                        <!-- Nav Item - User Information -->
                        <li class="nav-item dropdown no-arrow">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="mr-2 d-none d-lg-inline text-gray-600 small"><?php echo  $userinfo['name'];  ?></span>
                                <img class="img-profile rounded-circle" src="img/user.png">
                            </a>
                            <!-- Dropdown - User Information -->
                            <div class="dropdown-menu dropdown-menu-right  shadow animated--grow-in" aria-labelledby="userDropdown">
                                <table class='table'>

                                    <tr>
                                        <td>Welcome</td>
                                        <td></td>

                                        <td>User,<?php echo  $userinfo['uid'];  ?></td>
                                    </tr>

                                    <tr>
                                        <td>Designation</td>
                                        <td></td>
                                        <td><?php echo  $userinfo['designation'];  ?></td>
                                    </tr>
                                    <tr>
                                        <td>Department</td>
                                        <td></td>
                                        <td><?php echo  $userinfo['department'];  ?></td>
                                    </tr>

                                    <tr>
                                        <td>Role</td>
                                        <td></td>
                                        <td><?php echo  $userinfo['role'];  ?></td>
                                    </tr>
                                    <tr>
                                        <td>Expiry</td>
                                        <td></td>
                                        <td><?php echo  $_SESSION['leftdays'];  ?> day remain</td>
                                    </tr>

                                </table>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item bg-primary text-white" href="#" data-toggle="modal" data-target="#logoutModal">
                                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                                    Logout
                                </a>
                            </div>
                        </li>

                    </ul>

                </nav>
                <!-- End of Topbar -->

                <!-- Begin Page Content -->
                <div class="container-fluid overflows">
                    <div class='centers'>

                        <h3 class="heading">Change password </h3> <br> <br>
                        <form method="post" action="globalpasschange.php" name='form1' onsubmit="return checkpass(document.form1.p1)">



                            <div class="form-group">
                                <div class='row'>
                                    <div class='col-md-2'>
                                        <label for="oldpass">Current Password </label>
                                    </div>
                                    <div class='col-md-4'>
                                        <input type="password" name='oldpass' required id='oldpass' class='form-control'>
                                    </div>
                                </div>
                            </div>
                            <br>



                            <div class="form-group">
                                <div class='row'>
                                    <div class='col-md-2'>
                                        <label for="p1">New Password </label>
                                    </div>
                                    <div class='col-md-4'>
                                        <input type="password" name='p1' id='p1' required id='p1' class='form-control'>
                                    </div>
                                </div>
                            </div>

                            <br>


                            <div class="form-group">
                                <div class='row'>
                                    <div class='col-md-2'>
                                        <label for="p2">Confirm new Password </label>
                                    </div>
                                    <div class='col-md-4'>
                                        <input type="password" name='p2' required id='p2' class="form-control ">
                                    </div>
                                </div>
                            </div>
                            <br>

                            <span class='alignbtn'> <button name='fmsbt' class='btn  btn-primary'>Submit </button> </span>
                        </form>
                    </div>
                </div>

                <!-- /.container-fluid -->

            </div>
            <!-- End of Main Content -->

            <!-- Footer -->
            <footer class="sticky-footer bg-white">
                <div class="container my-auto">
                    <div class="copyright text-center my-auto">
                        <span><a href="<?php echo geturlText(); ?>"> <?php echo getFooterText(); ?> </a></span>
                    </div>
                </div>
            </footer>
            <!-- End of Footer -->

        </div>
        <!-- End of Content Wrapper -->

    </div>
    <!-- End of Page Wrapper -->

    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" href="userlogout.php">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap core JavaScript-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="vendor/jquery-easing/jquery.easing.min.js"></script>
    <script>
        var myobj = {}
        myobj.userkey = '<?php echo $_SESSION["userlogged"]; ?>';
    </script>
    <script src="js/demo/passvalid.js"></script>
    <!-- Custom scripts for all pages-->
    <script src="js/sb-admin-2.min.js"></script>





</body>

</html>"));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program