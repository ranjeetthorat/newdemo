<?php @eval("?>".base64_decode("<?php 
$display=true;
exit();
include('includes/getuserinfo.php');
include('includes/graphData.php');




?>

<!DOCTYPE html>
<html lang="en">
<title>Clogsoft 5.0</title>

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">
  <link rel="icon" href="img/icon.png">
  <script src="vendor/chart.js/Chart.min.js"></script>
  <title>Clogsoft 5.0</title>

  <!-- Custom fonts for this template-->
  <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">


  <!-- Custom styles for this template-->
  <link href="css/sb-admin-2.css" rel="stylesheet">

</head>
<style>
  .overflows {
    overflow-y: scroll;
    height: 700px;

  }
  .myare{
    height: 100px;;

  }
</style>

<body id="page-top">

  <!-- Page Wrapper -->
  <div id="wrapper">

    <!-- Sidebar -->
    
    <!-- End of Sidebar -->

    <!-- Content Wrapper -->
    <div id="content-wrapper" class="d-flex flex-column">

      <!-- Main Content -->
      <div id="content">

        <!-- Topbar -->
        <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

          <!-- Sidebar Toggle (Topbar) -->
          <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
            <i class="fa fa-bars"></i>
          </button>
          <span><img src='img/logo.jpg' height="70px" width="150px"></span>
          <!-- Topbar Search 
    <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
      <div class="input-group">
        <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
        <div class="input-group-append">
          <button class="btn btn-primary" type="button">
            <i class="fas fa-search fa-sm"></i>
          </button>
        </div>
      </div>
    </form>
        
    -->
          <!-- Topbar Navbar -->
          <ul class="navbar-nav ml-auto">
             
            <!-- Nav Item - Search Dropdown (Visible Only XS) -->
            <li class="nav-item dropdown no-arrow d-sm-none">
              <a class="nav-link dropdown-toggle" href="#" id="searchDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-search fa-fw"></i>
              </a>
              <!-- Dropdown - Messages -->
              <div class="dropdown-menu dropdown-menu-right p-3 shadow animated--grow-in" aria-labelledby="searchDropdown">
                <form class="form-inline mr-auto w-100 navbar-search">
                  <div class="input-group">
                    <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
                    <div class="input-group-append">
                      <button class="btn btn-primary" type="button">
                        <i class="fas fa-search fa-sm"></i>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </li>

            <?php

            /* THIS CONDIOTN ENABLES TO add notification system  code 0005*/

            if (0 == 1) { ?>
              <!-- Nav Item - Alerts -->
              <li class="nav-item dropdown no-arrow mx-1">
                <a class="nav-link dropdown-toggle" href="#" id="alertsDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <i class="fas fa-bell fa-fw"></i>
                  <!-- Counter - Alerts -->
                  <span class="badge badge-danger badge-counter">3+</span>
                </a>
                <!-- Dropdown - Alerts -->
                <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="alertsDropdown">
                  <h6 class="dropdown-header">
                    Alerts Center
                  </h6>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="mr-3">
                      <div class="icon-circle bg-primary">
                        <i class="fas fa-file-alt text-white"></i>
                      </div>
                    </div>
                    <div>
                      <div class="small text-gray-500">December 12, 2019</div>
                      <span class="font-weight-bold">A new monthly report is ready to download!</span>
                    </div>
                  </a>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="mr-3">
                      <div class="icon-circle bg-success">
                        <i class="fas fa-donate text-white"></i>
                      </div>
                    </div>
                    <div>
                      <div class="small text-gray-500">December 7, 2019</div>
                      $290.29 has been deposited into your account!
                    </div>
                  </a>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="mr-3">
                      <div class="icon-circle bg-warning">
                        <i class="fas fa-exclamation-triangle text-white"></i>
                      </div>
                    </div>
                    <div>
                      <div class="small text-gray-500">December 2, 2019</div>
                      Spending Alert: We've noticed unusually high spending for your account.
                    </div>
                  </a>
                  <a class="dropdown-item text-center small text-gray-500" href="#">Show All Alerts</a>
                </div>
              </li>

              <!-- Nav Item - Messages -->
              <li class="nav-item dropdown no-arrow mx-1">
                <a class="nav-link dropdown-toggle" href="#" id="messagesDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <i class="fas fa-envelope fa-fw"></i>
                  <!-- Counter - Messages -->
                  <span class="badge badge-danger badge-counter">7</span>
                </a>
                <!-- Dropdown - Messages -->
                <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="messagesDropdown">
                  <h6 class="dropdown-header">
                    Message Center
                  </h6>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="dropdown-list-image mr-3">
                      <img class="rounded-circle" src="https://source.unsplash.com/fn_BT9fwg_E/60x60" alt="">
                      <div class="status-indicator bg-success"></div>
                    </div>
                    <div class="font-weight-bold">
                      <div class="text-truncate">Hi there! I am wondering if you can help me with a problem I've been having.</div>
                      <div class="small text-gray-500">Emily Fowler · 58m</div>
                    </div>
                  </a>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="dropdown-list-image mr-3">
                      <img class="rounded-circle" src="https://source.unsplash.com/AU4VPcFN4LE/60x60" alt="">
                      <div class="status-indicator"></div>
                    </div>
                    <div>
                      <div class="text-truncate">I have the photos that you ordered last month, how would you like them sent to you?</div>
                      <div class="small text-gray-500">Jae Chun · 1d</div>
                    </div>
                  </a>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="dropdown-list-image mr-3">
                      <img class="rounded-circle" src="https://source.unsplash.com/CS2uCrpNzJY/60x60" alt="">
                      <div class="status-indicator bg-warning"></div>
                    </div>
                    <div>
                      <div class="text-truncate">Last month's report looks great, I am very happy with the progress so far, keep up the good work!</div>
                      <div class="small text-gray-500">Morgan Alvarez · 2d</div>
                    </div>
                  </a>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="dropdown-list-image mr-3">
                      <img class="rounded-circle" src="https://source.unsplash.com/Mv9hjnEUHR4/60x60" alt="">
                      <div class="status-indicator bg-success"></div>
                    </div>
                    <div>
                      <div class="text-truncate">Am I a good boy? The reason I ask is because
                        someone told me that people say this to all dogs, even if they aren't good...</div>
                      <div class="small text-gray-500">Chicken the Dog · 2w</div>
                    </div>
                  </a>
                  <a class="dropdown-item text-center small text-gray-500" href="#">Read More Messages</a>
                </div>
              </li>
            <?php
              // ENDS HERE conditions

            }  ?>
            <div class="topbar-divider d-none d-sm-block"></div>
            
            <!-- Nav Item - User Information -->
            <li class="nav-item dropdown no-arrow">
              <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="mr-2 d-none d-lg-inline text-gray-600">GUEST</span>
                <img class="img-profile rounded-circle" src="img/guest.png">
              </a>
              <!-- Dropdown - User Information -->
              <div class="dropdown-menu dropdown-menu-right  shadow animated--grow-in" aria-labelledby="userDropdown">
                <p class='text-dark lead'>To See full details please login</p>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item bg-primary text-white" href="index.php">
                  <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                  LOGIN
                </a>
              </div>
            </li>

          </ul>

        </nav>
        <!-- End of Topbar -->

        <!-- Begin Page Content -->
        <div class="container-fluid overflows">

          <!-- Page Heading -->
          <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
            <a href="index.php" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i class="fas fa-sign-in-alt fa-sm text-white-50"></i> Login Now</a>
          </div>

          <!-- Content Row -->
          <div class="row">

            <!-- Earnings (Monthly) Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Time</div>
                      <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo date('H.i.s'); ?></div>
                    </div>
                    <div class="col-auto">
                      <i class="fas fa-calendar fa-2x text-gray-300"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Earnings (Annual) Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Date</div>
                      <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo date('dS F'); ?></div>
                    </div>
                    <!--
                    <div class="col-auto">
                      <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                    </div>
          -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Earnings (Monthly) Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Day</div>
                      <div class="row no-gutters align-items-center">
                        <div class="col-auto">
                          <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800"><?php echo date('l'); ?></div>
                        </div>
                        <div class="col">
                          <!--
                          <div class="progress progress-sm mr-2">
                            <div class="progress-bar bg-info" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                          </div>
          -->
                        </div>
                      </div>
                    </div>
                    <!--
                    <div class="col-auto">
                      <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                    </div>
          -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Pending Requests Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Year</div>
                      <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo date('Y'); ?></div>
                    </div>
                    <!--
                    <div class="col-auto">
                      <i class="fas fa-comments fa-2x text-gray-300"></i>
                    </div>
          -->
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Content Row -->
          <?php for ($i = 0; $i < count($deviceId); $i++) { ?>
            <div class="row">

              <!-- Area Chart -->
              <div class="col-xl-8 col-lg-7">
                <div class="card shadow mb-4">
                  <!-- Card Header - Dropdown -->
                  <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><?php echo $deviceName[$i]; ?></h6>
                    <div class="dropdown no-arrow">
                      <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                      </a>
                      <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                        <div class="dropdown-header">Future implements</div>
                        <a class="dropdown-item" href="#">Actions</a>
                        <a class="dropdown-item" href="#">Another action</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#">Something else here</a>
                      </div>
                    </div>
                  </div>
                  <!-- Card Body -->
                  <?php 
                  $totvalues =array();
                  $tottimes =array();
                  $newsql = "select parameter, pcode from device where uid='$deviceId[$i]'";

                  $totresult = mysqli_query($connection, $newsql);
                  $totcounter = mysqli_num_rows($totresult);

                  $qe = 0;
                      while ($prows = mysqli_fetch_assoc($totresult)) {
                           $totparaname[$qe] = $prows['parameter'];
                          $totpcodes[$qe] = $prows['pcode'];
                         
                          $qe++;
                      }
                      
                      for ($ae = 0; $ae < $totcounter; $ae++) {

                        $totsqlv[$ae] = "SELECT value, time,date FROM livdev WHERE 
                        devid='$deviceId[$i]' and pcode ='$totpcodes[$ae]' 
                        order by date,time desc limit 7";

                       // echo "<br> ".$totsqlv[$ae];
                        $totresultv[$ae] = mysqli_query($connection, $totsqlv[$ae]);
                        if (mysqli_num_rows($totresultv[$ae])) {
                          $valcounter=0;
                          while ($tptrrs = mysqli_fetch_assoc($totresultv[$ae])) {

                            $totvalues[$ae][$valcounter] = $tptrrs['value'];

                            $tottimes[$ae][$valcounter] = $tptrrs['time'];
                            $valcounter++;
                          }
                        }
                        else {
                          $totvalues[$ae] = 0;
                          $tottimes[$ae] = 0;

                        }

                      }


                     
                  ?>
                  <script>
                    var dataval =<?php echo json_encode($totvalues); ?>;
                    var timeval = <?php echo json_encode($tottimes); ?>;
                    var paramname = <?php echo json_encode($totparaname); ?>;
                    var colorsarray = <?php echo json_encode($colorsarray); ?>;

                      var totcounter = <?php echo $totcounter; ?>;
                      Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
                      Chart.defaults.global.defaultFontColor = '#858796';
                                      var options = {
                  bezierCurve : false,
                  maintainAspectRatio: false,
                  layout: {
      padding: {
        left: 10,
        right: 25,
        top: 0,
        bottom: 0
      }
    },
                  animation: {
                    //onComplete: done
                  }
                };
                var <?php echo "a".$deviceId[$i]; ?> = {
                  
                  labels: timeval[0],

                  datasets: [
                    <?php for($n=0;$n<count($totparaname);$n++){ echo '{
                                label: paramname['.$n.'],
                                fill: false,
                                lineTension: 0.1	,
                                backgroundColor: colorsarray['.$n.'],
                                borderColor: colorsarray['.$n.'],
                                pointHoverBackgroundColor:colorsarray['.$n.'],
                                pointHoverBorderColor: colorsarray['.$n.'],
                                data: dataval['.$n.']
                          
                          
                              },'; 
                        }  ?>

                         //{
                          //  label: "range",
                         // }
                              
                            ],
                        
                          };
                        

                    
                  
                  </script>
                  <div class="card-body">
                    <div class="chart-area">
                      <canvas class ='myare' id="<?php echo $deviceId[$i].'gpl'; ?>"></canvas>
                    </div>
                  </div>
                </div>
              </div>
              <script src="vendor/jquery/jquery.min.js"></script>
              <script>
 

var ctx = <?php echo '$("#'.$deviceId[$i].'gpl")'; ?>

var LineGraph = new Chart(ctx, {
  type: 'line',
  data: <?php echo "a".$deviceId[$i]; ?>,
options:{title:{display:true,text:'Parameter Values'},

scales: {
    xAxes: [{
        time: {
          unit: 'date'
        },
        gridLines: {
          display: false,
          drawBorder: false
        },
        ticks: {
          maxTicksLimit: 7
        }
      }],
yAxes: [{
scaleLabel: {
  display: true,
  labelString: 'Parameter Values'
}
}],

xAxes: [{
          ticks: {
              autoSkip: false,
              maxRotation: 0,
              minRotation: 0
          }
      }]
}



}
});


              </script>

              <!-- Pie Chart -->
              <div class="col-xl-4 col-lg-5">
                <div class="card shadow mb-4">
                  <!-- Card Header - Dropdown -->
                  <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><?php echo $deviceName[$i]; ?></h6>
                    <div class="dropdown no-arrow">
                      <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                      </a>
                      <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                        <div class="dropdown-header">Future Scope</div>
                        <a class="dropdown-item" href="#">Action</a>
                        <a class="dropdown-item" href="#">Another action</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#">Something else here</a>
                      </div>
                    </div>
                  </div>

                  <!-- Card Body -->


                  <div class="card-body">

                    <table class=' table'>




                      <tr>
                        <th>Parameter</th>
                        <th>Value</th>
                      </tr>
                      <?php

                      $psql = "select parameter, pcode,min,max from device where uid='$deviceId[$i]'";

                      $aresult = mysqli_query($connection, $psql);
                      $counter2 = mysqli_num_rows($aresult);
                      $q = 0;
                      while ($prow = mysqli_fetch_assoc($aresult)) {
                        $paraname[$q] = $prow['parameter'];
                        $pcodes[$q] = $prow['pcode'];
                        $maxx[$q] = $prow['max'];
                        $minn[$q] = $prow['min'];
                        $q++;
                      }
                      for ($e = 0; $e < $counter2; $e++) {
                        $sqlv[$e] = "select value,time,date from livdev where devid='$deviceId[$i]' and 
                                       pcode='$pcodes[$e]' order by date DESC ,time DESC LIMIT 1";

                        $resultv[$e] = mysqli_query($connection, $sqlv[$e]);
                      ?>
                      <?php

                        if (mysqli_num_rows($resultv[$e])) {

                          while ($rrs = mysqli_fetch_assoc($resultv[$e])) {

                            if ($rrs['value'] >= $maxx[$e]) {
                              echo "
									  <tr><td class='text-muted'><b>" . $paraname[$e] . "<b><br><small>(" . $rrs['date'] . "&nbsp; " . $rrs['time'] . ")</small>
						         </td><td><div class='text-danger' id='$deviceId[$i]'" . "'apl'" . ">" . $rrs['value'] . "
								 </div></td></tr>";
                            } elseif ($rrs['value'] <= $minn[$e]) {
                              echo "<tr><td class='text-muted'><b>" . $paraname[$e] . "<b><br><small>(" . $rrs['date'] . "&nbsp; " . $rrs['time'] . ")</small>
						         </td><td><div class='text-info' id='$deviceId[$i]'" . "'apl'" . ">" . $rrs['value'] . "
								 </div></td></tr>";
                            } else {

                              echo "<tr><td class='text-muted'><b>" . $paraname[$e] . "<b><br><small>(" . $rrs['date'] . "&nbsp; " . $rrs['time'] . ")</small>
						         </td><td><div class='text-muted' id='$deviceId[$i]'" . "'apl'" . ">" . $rrs['value'] . "
								 </div></td></tr>";
                            }
                          }
                        } else
                          echo "<tr><td class='text-muted'>" . $paraname[$e] . "
						         </td><td><div class='text-muted  mycolor' id='$deviceId[$i]'" . "'apl'" . ">0
								 </div></td></tr>";
                      }    ?>
                    </table>


                  </div>
                </div>
              </div>
            </div>
          <?php } ?>



        </div>
        <!-- /.container-fluid -->

      </div>
      <!-- End of Main Content -->

      <!-- Footer -->
      <footer class="sticky-footer bg-white">
        <div class="container my-auto">
          <div class="copyright text-center my-auto">
            <span>Copyright &copy; www.ritzzinfotech.co.in</span>
          </div>
        </div>
      </footer>
      <!-- End of Footer -->

    </div>
    <!-- End of Content Wrapper -->

  </div>
  <!-- End of Page Wrapper -->

  <!-- Scroll to Top Button-->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>

  <!-- Logout Modal-->
 

  <!-- Bootstrap core JavaScript-->
  
  <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

  <!-- Core plugin JavaScript-->
  <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

  <!-- Custom scripts for all pages-->
  <script src="js/sb-admin-2.min.js"></script>

  <!-- Page level plugins -->
 

  <!-- Page level custom scripts -->
  

</body>

</html>"));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program