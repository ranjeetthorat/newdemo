<?php @eval("?>".base64_decode("PD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvZ2V0dXNlcmluZm8ucGhwJyk7ID8+DQo8IURPQ1RZUEUgaHRtbD4NCjxodG1sIGxhbmc9ImVuIj4NCjx0aXRsZT5DbG9nc29mdCA1LjA8L3RpdGxlPg0KPD9waHANCnNlc3Npb25fc3RhcnQoKTsNCiRtaWQgPSAnJzsNCg0KaWYgKCEoJF9TRVNTSU9OWydtbG9nZ2VkaW4nXSA9PSB0cnVlKSkgew0KICAgIGhlYWRlcigibG9jYXRpb246aW5kZXgucGhwIik7DQp9DQo/Pg0KDQo8aGVhZD4NCg0KICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPg0KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgc2hyaW5rLXRvLWZpdD1ubyI+DQogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiI+DQogICAgPG1ldGEgbmFtZT0iYXV0aG9yIiBjb250ZW50PSIiPg0KICAgIDxsaW5rIHJlbD0iaWNvbiIgaHJlZj0iaW1nL2ljb24ucG5nIj4NCg0KICAgIDx0aXRsZT5DbG9nc29mdCA1LjA8L3RpdGxlPg0KDQogICAgPCEtLSBDdXN0b20gZm9udHMgZm9yIHRoaXMgdGVtcGxhdGUtLT4NCiAgICA8bGluayBocmVmPSJ2ZW5kb3IvZm9udGF3ZXNvbWUtZnJlZS9jc3MvYWxsLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiPg0KDQoNCiAgICA8IS0tIEN1c3RvbSBzdHlsZXMgZm9yIHRoaXMgdGVtcGxhdGUtLT4NCiAgICA8bGluayBocmVmPSJjc3Mvc2ItYWRtaW4tMi5taW4uY3NzIiByZWw9InN0eWxlc2hlZXQiPg0KDQo8L2hlYWQ+DQo8c3R5bGU+DQogICAgLm92ZXJmbG93cyB7DQogICAgICAgIG92ZXJmbG93LXk6IHNjcm9sbDsNCiAgICAgICAgaGVpZ2h0OiA3MDBweDsNCg0KICAgIH0NCiAgICB0YWJsZSB7DQogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7DQogIGJvcmRlci1zcGFjaW5nOiAwOw0KICB3aWR0aDogMTAwJTsNCiAgbGVmdDozMHB4Ow0KICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOw0KICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7DQp9DQoNCnRoLCB0ZCB7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIHBhZGRpbmc6IDEycHg7DQogIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7DQp9DQoNCnRyOm50aC1jaGlsZChldmVuKSB7DQogIGJhY2tncm91bmQtY29sb3I6ICNkZGRkZGQ7DQp9DQoud3JhcHNzew0KICAgIG1hcmdpbi1sZWZ0OiA3MHB4Ow0KfQ0KDQoNCiNteUlucHV0DQp7DQoJDQoJDQoJIHdpZHRoOiA2MCU7DQoJIGZvbnQtc2l6ZTogMTZweDsNCn0NCiNteVRhYmxlIHRyLmhlYWRlciwgI215VGFibGUgdHI6aG92ZXIgew0KICAvKiBBZGQgYSBncmV5IGJhY2tncm91bmQgY29sb3IgdG8gdGhlIHRhYmxlIGhlYWRlciBhbmQgb24gaG92ZXIgKi8NCiAgYmFja2dyb3VuZC1jb2xvcjogI0NDRkZDQw0KfQ0KPC9zdHlsZT4NCg0KPGJvZHkgaWQ9InBhZ2UtdG9wIj4NCg0KICAgIDwhLS0gUGFnZSBXcmFwcGVyIC0tPg0KICAgIDxkaXYgaWQ9IndyYXBwZXIiPg0KDQogICAgICAgIDwhLS0gU2lkZWJhciAtLT4NCiAgICAgICAgPHVsIGNsYXNzPSJuYXZiYXItbmF2IGJnLWdyYWRpZW50LXByaW1hcnkgc2lkZWJhciBzaWRlYmFyLWRhcmsgYWNjb3JkaW9uIiBpZD0iYWNjb3JkaW9uU2lkZWJhciI+DQoNCiAgICAgICAgICAgIDwhLS0gU2lkZWJhciAtIEJyYW5kIC0tPg0KICAgICAgICAgICAgPGEgY2xhc3M9InNpZGViYXItYnJhbmQgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiBocmVmPSJtYWluZGFzaC5waHAiPg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItYnJhbmQtaWNvbiByb3RhdGUtbi00NSI+DQogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWcvaWNvbi5wbmciIHdpZHRoPSIyNXB4IiBoZWlnaHQ9IjI1cHgiPg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItYnJhbmQtdGV4dCBteC0zIj5DTE9HU09GVCA1LjAgPHN1cD48L3N1cD48L2Rpdj4NCiAgICAgICAgICAgIDwvYT4NCg0KICAgICAgICAgICAgPCEtLSBEaXZpZGVyIC0tPg0KICAgICAgICAgICAgPGhyIGNsYXNzPSJzaWRlYmFyLWRpdmlkZXIgbXktMCI+DQoNCiAgICAgICAgICAgIDwhLS0gTmF2IEl0ZW0gLSBEYXNoYm9hcmQgLS0+DQogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGFjdGl2ZSI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJtYWluZGFzaC5waHAiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWZ3IGZhLXRhY2hvbWV0ZXItYWx0Ij48L2k+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuPkRhc2hib2FyZDwvc3Bhbj48L2E+DQogICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICA8IS0tIERpdmlkZXIgLS0+DQogICAgICAgICAgICA8aHIgY2xhc3M9InNpZGViYXItZGl2aWRlciI+DQoNCiAgICAgICAgICAgIDwhLS0gSGVhZGluZyANCiAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItaGVhZGluZyI+DQogICAgICAgIEdsb2JhbA0KICAgICAgPC9kaXY+DQogICAgICAtLT4NCiAgICAgICAgICAgIDwhLS0gTmF2IEl0ZW0gLSBQYWdlcyBDb2xsYXBzZSBNZW51IC0tPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCIgaHJlZj0iIyIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlVHdvIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVR3byI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZncgZmEtY29nIj48L2k+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuPkRFVklDRVM8L3NwYW4+DQogICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlVHdvIiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1R3byIgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb25TaWRlYmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmctd2hpdGUgcHktMiBjb2xsYXBzZS1pbm5lciByb3VuZGVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iY29sbGFwc2UtaGVhZGVyIj5Db250cm9sczwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0iYWRkRGV2aWNlLnBocCI+QWRkIERldmljZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJzaG93RGV2aWNlLnBocCI+UmVtb3ZlIERldmljZTwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJkZXZpY2VMaXN0LnBocCI+U2hvdyBEZXZpY2U8L2E+DQogICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgPCEtLSBOYXYgSXRlbSAtIFV0aWxpdGllcyBDb2xsYXBzZSBNZW51IC0tPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCIgaHJlZj0iIyIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlVXRpbGl0aWVzIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVV0aWxpdGllcyI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZncgZmEtYnVpbGRpbmciPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4+REVQQVJUTUVOVDwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VVdGlsaXRpZXMiIGNsYXNzPSJjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nVXRpbGl0aWVzIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvblNpZGViYXIiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy13aGl0ZSBweS0yIGNvbGxhcHNlLWlubmVyIHJvdW5kZWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJjb2xsYXBzZS1oZWFkZXIiPkNvbnRyb2xzPC9oNj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJhZGREZXBhcnQucGhwIj5BZGQgTmV3IERlcGFydG1lbnQ8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0ic2hvd0RlcGFydC5waHAiPkVkaXQgRGVwYXJ0bWVudDwvYT4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvbGk+DQoNCjwhLS0gRGl2aWRlciANCjxociBjbGFzcz0ic2lkZWJhci1kaXZpZGVyIj4NCi0tPg0KICAgICAgPCEtLSBIZWFkaW5nIA0KPGRpdiBjbGFzcz0ic2lkZWJhci1oZWFkaW5nIj4NCiAgTWFuYWdlDQo8L2Rpdj4NCiAgLS0+DQogICAgICA8IS0tIE5hdiBJdGVtIC0gUGFnZXMgQ29sbGFwc2UgTWVudSANCiAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIiBocmVmPSIjIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjY29sbGFwc2VBZG1pbiIgYXJpYS1leHBhbmRlZD0idHJ1ZSIgYXJpYS1jb250cm9scz0iY29sbGFwc2VBZG1pbiI+DQogICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1mdyBmYS11c2VyLXBsdXMiPjwvaT4NCiAgICAgICAgICA8c3Bhbj5BZG1pbjwvc3Bhbj4NCiAgICAgICAgPC9hPg0KICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZUFkbWluIiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1BhZ2VzIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvblNpZGViYXIiPg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImJnLXdoaXRlIHB5LTIgY29sbGFwc2UtaW5uZXIgcm91bmRlZCI+DQogICAgICAgICAgICA8aDYgY2xhc3M9ImNvbGxhcHNlLWhlYWRlciI+TmV3PC9oNj4NCiAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJjcmVhdGVBZG1pbi5waHAiPkNyZWF0ZSBBZG1pbjwvYT4NCiAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJzaG93bGlzdC5waHAiPkVkaXQgQWRtaW48L2E+DQoNCiAgICAgICAgICAgICBPUFRJT05TIEhJRERFTiANCg0KICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImZvcmdvdC1wYXNzd29yZC5odG1sIj5Gb3Jnb3QgUGFzc3dvcmQ8L2E+DQogICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZS1kaXZpZGVyIj48L2Rpdj4NCiAgICAgIDxoNiBjbGFzcz0iY29sbGFwc2UtaGVhZGVyIj5PdGhlciBQYWdlczo8L2g2Pg0KICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9IjQwNC5odG1sIj40MDQgUGFnZTwvYT4NCiAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJibGFuay5odG1sIj5CbGFuayBQYWdlPC9hPg0KDQogICAgIA0KDQogICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9saT4NCi0tPg0KDQogICAgICA8IS0tIE5hdiBJdGVtIC0gQUNDRVNTQ09OVFJPTCAtLT4NCiAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9ImFjY2Vzc0NvbnRyb2wucGhwIj4NCiAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWNvZyBmYS1zcGluIj48L2k+DQogICAgICAgICAgPHNwYW4+QUNDRVNTIENPTlRST0w8L3NwYW4+PC9hPg0KICAgICAgPC9saT4NCg0KDQogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIiBocmVmPSIjIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjY29sbGFwc2VVc2VyIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVVzZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWZ3IGZhIGZhLXVzZXIiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VXNlcjwvc3Bhbj4NCiAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VVc2VyIiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1BhZ2VzIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvblNpZGViYXIiPg0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy13aGl0ZSBweS0yIGNvbGxhcHNlLWlubmVyIHJvdW5kZWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJjb2xsYXBzZS1oZWFkZXIiPk5ldzwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0iY3JlYXRlVXNlci5waHAiPkNyZWF0ZSBVc2VyPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9InNob3dsaXN0dS5waHAiPkVkaXQgVXNlcjwvYT4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBPUFRJT04gSElEREVODQogICAgICAgICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0iZm9yZ290LXBhc3N3b3JkLmh0bWwiPkZvcmdvdCBQYXNzd29yZDwvYT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlLWRpdmlkZXIiPjwvZGl2Pg0KICAgICAgICAgICAgPGg2IGNsYXNzPSJjb2xsYXBzZS1oZWFkZXIiPk90aGVyIFBhZ2VzOjwvaDY+DQogICAgICAgICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0iNDA0Lmh0bWwiPjQwNCBQYWdlPC9hPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImJsYW5rLmh0bWwiPkJsYW5rIFBhZ2U8L2E+DQoNCiAgICAgICAgICAgIC0tLT4NCg0KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvbGk+DQogICAgICAgICAgICA8IS0tIE5hdiBJdGVtIC0gQ2hhcnRzIC0tPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCIgaHJlZj0iIyIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlUmVwb3J0IiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVJlcG9ydCI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZmlsZS1hbHQiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4+UmVwb3J0cyBTZWN0aW9uPC9zcGFuPg0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZVJlcG9ydCIgY2xhc3M9ImNvbGxhcHNlIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmdQYWdlcyIgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb25TaWRlYmFyIj4NCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYmctd2hpdGUgcHktMiBjb2xsYXBzZS1pbm5lciByb3VuZGVkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iY29sbGFwc2UtaGVhZGVyIj48L2g2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9InJlcG9ydHNlYy5waHAiPkdlbmVyYXRlIFJlcG9ydDwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJlbWFpbHJlcG9ydC5waHAiPkVtYWlsIFJlcG9ydDwvYT4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgICA8IS0tIE5hdiBJdGVtIC0gQXVkaXQgLS0+DQogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9ImF1ZGl0VHJhaWwucGhwIj4NCiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1mdyBmYS10YWJsZSI+PC9pPg0KICAgICAgICAgICAgICAgICAgICA8c3Bhbj5BdWRpdDwvc3Bhbj48L2E+DQogICAgICAgICAgICA8L2xpPg0KDQoNCg0KICAgICAgICAgICAgPCEtLSBOYXYgSXRlbSAtIGxvZyBvdXQgYW5kIGhlbHAgLS0+DQoNCg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJoZWxwLnBocCI+DQogICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZncgZmEtdGFibGUiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4+SGVscDwvc3Bhbj48L2E+DQogICAgICAgICAgICA8L2xpPg0KDQoNCiAgICAgICAgICAgIDwhLS0gU2lkZWJhciBUb2dnbGVyIChTaWRlYmFyKSAtLT4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIGQtbm9uZSBkLW1kLWlubGluZSI+DQogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icm91bmRlZC1jaXJjbGUgYm9yZGVyLTAiIGlkPSJzaWRlYmFyVG9nZ2xlIj48L2J1dHRvbj4NCiAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgIDwvdWw+DQogICAgICAgIDwhLS0gRW5kIG9mIFNpZGViYXIgLS0+DQoNCiAgICAgICAgPCEtLSBDb250ZW50IFdyYXBwZXIgLS0+DQogICAgICAgIDxkaXYgaWQ9ImNvbnRlbnQtd3JhcHBlciIgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiI+DQoNCiAgICAgICAgICAgIDwhLS0gTWFpbiBDb250ZW50IC0tPg0KICAgICAgICAgICAgPGRpdiBpZD0iY29udGVudCI+DQoNCiAgICAgICAgICAgICAgICA8IS0tIFRvcGJhciAtLT4NCiAgICAgICAgICAgICAgICA8bmF2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWV4cGFuZCBuYXZiYXItbGlnaHQgYmctd2hpdGUgdG9wYmFyIG1iLTQgc3RhdGljLXRvcCBzaGFkb3ciPg0KDQogICAgICAgICAgICAgICAgICAgIDwhLS0gU2lkZWJhciBUb2dnbGUgKFRvcGJhcikgLS0+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InNpZGViYXJUb2dnbGVUb3AiIGNsYXNzPSJidG4gYnRuLWxpbmsgZC1tZC1ub25lIHJvdW5kZWQtY2lyY2xlIG1yLTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpbWcgc3JjPSdpbWcvbG9nby5qcGcnIGhlaWdodD0iNzBweCIgd2lkdGg9IjE1MHB4Ij48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gVG9wYmFyIFNlYXJjaCANCiAgICAgICAgICA8Zm9ybSBjbGFzcz0iZC1ub25lIGQtc20taW5saW5lLWJsb2NrIGZvcm0taW5saW5lIG1yLWF1dG8gbWwtbWQtMyBteS0yIG15LW1kLTAgbXctMTAwIG5hdmJhci1zZWFyY2giPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPg0KICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBiZy1saWdodCBib3JkZXItMCBzbWFsbCIgcGxhY2Vob2xkZXI9IlNlYXJjaCBmb3IuLi4iIGFyaWEtbGFiZWw9IlNlYXJjaCIgYXJpYS1kZXNjcmliZWRieT0iYmFzaWMtYWRkb24yIj4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAtYXBwZW5kIj4NCiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHR5cGU9ImJ1dHRvbiI+DQogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNlYXJjaCBmYS1zbSI+PC9pPg0KICAgICAgICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgIDwvZm9ybT4NCiAgICAgICAgICAgICAgDQogICAgICAgICAgLS0+DQogICAgICAgICAgICAgICAgICAgIDwhLS0gVG9wYmFyIE5hdmJhciAtLT4NCiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXZiYXItbmF2IG1sLWF1dG8iPg0KDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvcGJhci1kaXZpZGVyIGQtbm9uZSBkLXNtLWJsb2NrIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDw/cGhwICR1c2VyaW5mbyA9IGdldFVzZXJJbmZvKCdhJywgJ2InKTsgPz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gTmF2IEl0ZW0gLSBVc2VyIEluZm9ybWF0aW9uIC0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSBkcm9wZG93biBuby1hcnJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGRyb3Bkb3duLXRvZ2dsZSIgaHJlZj0iIyIgaWQ9InVzZXJEcm9wZG93biIgcm9sZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iZHJvcGRvd24iIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1yLTIgZC1ub25lIGQtbGctaW5saW5lIHRleHQtZ3JheS02MDAgc21hbGwiPjw/cGhwIGVjaG8gICR1c2VyaW5mb1snbmFtZSddOyAgPz48L3NwYW4+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1wcm9maWxlIHJvdW5kZWQtY2lyY2xlIiBzcmM9ImltZy9wcm8ucG5nIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBEcm9wZG93biAtIFVzZXIgSW5mb3JtYXRpb24gLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0ICBzaGFkb3cgYW5pbWF0ZWQtLWdyb3ctaW4iIGFyaWEtbGFiZWxsZWRieT0idXNlckRyb3Bkb3duIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSd0YWJsZSc+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+V2VsY29tZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+QWRtaW4sPD9waHAgZWNobyAgJHVzZXJpbmZvWyd1aWQnXTsgID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RGVzaWduYXRpb248L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48P3BocCBlY2hvICAkdXNlcmluZm9bJ3JvbGUnXTsgID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPkRlcGFydG1lbnQ8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48P3BocCBlY2hvICAkdXNlcmluZm9bJ2RlcGFydG1lbnQnXTsgID8+PC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+Um9sZTwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjw/cGhwIGVjaG8gICR1c2VyaW5mb1sncm9sZSddOyAgPz48L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4NCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1kaXZpZGVyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRyb3Bkb3duLWl0ZW0gYmctcHJpbWFyeSB0ZXh0LXdoaXRlIiBocmVmPSIjIiBkYXRhLXRvZ2dsZT0ibW9kYWwiIGRhdGEtdGFyZ2V0PSIjbG9nb3V0TW9kYWwiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1zaWduLW91dC1hbHQgZmEtc20gZmEtZncgbXItMiB0ZXh0LWdyYXktNDAwIj48L2k+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dvdXQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4NCg0KICAgICAgICAgICAgICAgICAgICA8L3VsPg0KDQogICAgICAgICAgICAgICAgPC9uYXY+DQogICAgICAgICAgICAgICAgPCEtLSBFbmQgb2YgVG9wYmFyIC0tPg0KDQogICAgICAgICAgICAgICAgPCEtLSBCZWdpbiBQYWdlIENvbnRlbnQgLS0+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIG92ZXJmbG93cyI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J3dyYXBzcyc+DQoNCiAgICAgICAgICAgICAgICAgICAgPGgzIHN0eWxlPSd0ZXh0LWFsaWduOmNlbnRlcjsnPiBDdXJyZW50IERldmljZSBkYXRhIDwvaDM+DQogICAgICAgICAgICAgICAgICAgIDxicj4NCiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJteUlucHV0IiBvbmtleXVwPSJteUZ1bmN0aW9uKCkiIHBsYWNlaG9sZGVyPSJTZWFyY2ggZm9yIGRldmljZS4uIj4NCiAgICAgICAgICAgICAgICAgICAgPGJyPjxicj4NCg0KICAgICAgICAgICAgICAgICAgICA8P3BocA0KICAgICAgICAgICAgICAgICAgICAkc3FsID0gInNlbGVjdCAqIGZyb20gZGV2aWNlIG9yZGVyIGJ5IGRlcHRpZCx1aWQscGNvZGUiOw0KDQogICAgICAgICAgICAgICAgICAgICRyZXN1bHQgPSBteXNxbGlfcXVlcnkoJGNvbm5lY3Rpb24sICRzcWwpOw0KDQoNCiAgICAgICAgICAgICAgICAgICAgZWNobyAiPHRhYmxlIGlkPSdteVRhYmxlJz4iOw0KDQogICAgICAgICAgICAgICAgICAgIGVjaG8gIjx0cj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+RGV2aWNlIG5hbWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXZpY2UgSUQ8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXByYXRtZW50IG5hbWU8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5EZXBhcnRtZW50IElkPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+UGFyYW1ldGVyPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWF4PC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+TWluPC90aD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+Q29sb3I8L3RoPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+IjsNCg0KDQogICAgICAgICAgICAgICAgICAgIGlmIChteXNxbGlfbnVtX3Jvd3MoJHJlc3VsdCkgPiAwKSB7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgkcm93ID0gbXlzcWxpX2ZldGNoX2Fzc29jKCRyZXN1bHQpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWNobyAiPHRyPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4iIC4gJHJvd1snbmFtZSddIC4gIjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiIgLiAkcm93Wyd1aWQnXSAuICI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4iIC4gJHJvd1snZGVwdG5hbWUnXSAuICI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4iIC4gJHJvd1snZGVwdGlkJ10gLiAiPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+IiAuICRyb3dbJ3BhcmFtZXRlciddIC4gIjwvdGQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiIgLiAkcm93WydtYXgnXSAuICI8L3RkPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4iIC4gJHJvd1snbWluJ10gLiAiPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGJ1dHRvbiBzdHlsZT0nYmFja2dyb3VuZC1jb2xvcjoiIC4gJHJvd1snY29sb3InXSAuICI7aGVpZ2h0OjEwcHg7d2lkdGg6MjVweDsnPjwvYnV0dG9uPiAgPC90ZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPiI7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICJubyByZWNvcmQgZm91bmQiOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICBlY2hvICI8L3RhYmxlPiI7DQogICAgICAgICAgICAgICAgICAgID8+DQoNCg0KICAgICAgICAgICAgICAgIDwvZGl2Pg0KDQogICAgICAgICAgICAgICAgPC9kaXY+DQoNCiAgICAgICAgICAgICAgICA8IS0tIC8uY29udGFpbmVyLWZsdWlkIC0tPg0KDQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwhLS0gRW5kIG9mIE1haW4gQ29udGVudCAtLT4NCg0KICAgICAgICAgICAgPCEtLSBGb290ZXIgLS0+DQogICAgICAgICAgICA8Zm9vdGVyIGNsYXNzPSJzdGlja3ktZm9vdGVyIGJnLXdoaXRlIj4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXktYXV0byI+DQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvcHlyaWdodCB0ZXh0LWNlbnRlciBteS1hdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgPHNwYW4+PGEgaHJlZiA9ICI8P3BocCBlY2hvIGdldHVybFRleHQoKTsgPz4iPiA8P3BocCBlY2hvIGdldEZvb3RlclRleHQoKTsgPz4gPC9hPjwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Zvb3Rlcj4NCiAgICAgICAgICAgIDwhLS0gRW5kIG9mIEZvb3RlciAtLT4NCg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPCEtLSBFbmQgb2YgQ29udGVudCBXcmFwcGVyIC0tPg0KDQogICAgPC9kaXY+DQogICAgPCEtLSBFbmQgb2YgUGFnZSBXcmFwcGVyIC0tPg0KDQogICAgPCEtLSBTY3JvbGwgdG8gVG9wIEJ1dHRvbi0tPg0KICAgIDxhIGNsYXNzPSJzY3JvbGwtdG8tdG9wIHJvdW5kZWQiIGhyZWY9IiNwYWdlLXRvcCI+DQogICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtYW5nbGUtdXAiPjwvaT4NCiAgICA8L2E+DQoNCiAgICA8IS0tIExvZ291dCBNb2RhbC0tPg0KICAgIDxkaXYgY2xhc3M9Im1vZGFsIGZhZGUiIGlkPSJsb2dvdXRNb2RhbCIgdGFiaW5kZXg9Ii0xIiByb2xlPSJkaWFsb2ciIGFyaWEtbGFiZWxsZWRieT0iZXhhbXBsZU1vZGFsTGFiZWwiIGFyaWEtaGlkZGVuPSJ0cnVlIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1oZWFkZXIiPg0KICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0iZXhhbXBsZU1vZGFsTGFiZWwiPlJlYWR5IHRvIExlYXZlPzwvaDU+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImNsb3NlIiB0eXBlPSJidXR0b24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiIGFyaWEtbGFiZWw9IkNsb3NlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj7Dlzwvc3Bhbj4NCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+U2VsZWN0ICJMb2dvdXQiIGJlbG93IGlmIHlvdSBhcmUgcmVhZHkgdG8gZW5kIHlvdXIgY3VycmVudCBzZXNzaW9uLjwvZGl2Pg0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+DQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5IiB0eXBlPSJidXR0b24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPkNhbmNlbDwvYnV0dG9uPg0KICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBocmVmPSJsb2dpbi5odG1sIj5Mb2dvdXQ8L2E+DQogICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8IS0tIEJvb3RzdHJhcCBjb3JlIEphdmFTY3JpcHQtLT4NCiAgICA8c2NyaXB0IHNyYz0idmVuZG9yL2pxdWVyeS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4NCiAgICA8c2NyaXB0IHNyYz0idmVuZG9yL2Jvb3RzdHJhcC9qcy9ib290c3RyYXAuYnVuZGxlLm1pbi5qcyI+PC9zY3JpcHQ+DQogICAgPHNjcmlwdCBzcmM9ImpzL2RlbW8vc2VhcmNoLmpzIj48L3NjcmlwdD4NCiAgICA8IS0tIENvcmUgcGx1Z2luIEphdmFTY3JpcHQtLT4NCiAgICA8c2NyaXB0IHNyYz0idmVuZG9yL2pxdWVyeS1lYXNpbmcvanF1ZXJ5LmVhc2luZy5taW4uanMiPjwvc2NyaXB0Pg0KDQogICAgPCEtLSBDdXN0b20gc2NyaXB0cyBmb3IgYWxsIHBhZ2VzLS0+DQogICAgPHNjcmlwdCBzcmM9ImpzL3NiLWFkbWluLTIubWluLmpzIj48L3NjcmlwdD4NCg0KDQoNCg0KDQo8L2JvZHk+DQoNCjwvaHRtbD4="));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program