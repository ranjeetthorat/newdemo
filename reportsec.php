<?php @eval("?>".base64_decode("PD9waHAgaW5jbHVkZSgnaW5jbHVkZXMvZ2V0dXNlcmluZm8ucGhwJyk7ID8+DQo8IURPQ1RZUEUgaHRtbD4NCjxodG1sIGxhbmc9ImVuIj4NCjx0aXRsZT5DbG9nc29mdCA1LjA8L3RpdGxlPg0KPD9waHANCnNlc3Npb25fc3RhcnQoKTsNCg0KaWYoISgkX1NFU1NJT05bJ21sb2dnZWRpbiddID09IHRydWUpKQ0Kew0KaGVhZGVyKCJsb2NhdGlvbjppbmRleC5waHAiKTsNCn0NCiRtaWQ9Jyc7DQoNCiRkc3FsPSJzZWxlY3QgKiBmcm9tIGRldmljZSAiOw0KJHNxbD0ic2VsZWN0IERJU1RJTkNUKHVpZCksbmFtZSBmcm9tIGRldmljZSI7DQokZHJlc3VsdD1teXNxbGlfcXVlcnkoJGNvbm5lY3Rpb24sJGRzcWwpOw0KJHJlc3VsdD1teXNxbGlfcXVlcnkoJGNvbm5lY3Rpb24sJHNxbCk7DQoNCiRjb3VudGVyMT1teXNxbGlfbnVtX3Jvd3MoJHJlc3VsdCk7DQokej0wOw0KJGRldmljZU5hbWU9YXJyYXkoKTsNCiRkZXZpY2VJZD1hcnJheSgpOw0KJHBhcmFuYW1lPWFycmF5KCk7DQokcGNvZGVzPWFycmF5KCk7DQovL2VjaG8gInRvdG9hbCBkZXZpY2VzIiAuJGNvdW50ZXIxOw0KPz4NCjxoZWFkPg0KDQogIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4NCiAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4NCiAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBzaHJpbmstdG8tZml0PW5vIj4NCiAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiI+DQogIDxtZXRhIG5hbWU9ImF1dGhvciIgY29udGVudD0iIj4NCiAgPGxpbmsgcmVsPSJpY29uIiBocmVmPSJpbWcvaWNvbi5wbmciPg0KDQogIDx0aXRsZT5DbG9nc29mdCA1LjA8L3RpdGxlPg0KDQogIDwhLS0gQ3VzdG9tIGZvbnRzIGZvciB0aGlzIHRlbXBsYXRlLS0+DQogIDxsaW5rIGhyZWY9InZlbmRvci9mb250YXdlc29tZS1mcmVlL2Nzcy9hbGwubWluLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+DQogDQoNCiAgPCEtLSBDdXN0b20gc3R5bGVzIGZvciB0aGlzIHRlbXBsYXRlLS0+DQogIDxsaW5rIGhyZWY9ImNzcy9zYi1hZG1pbi0yLm1pbi5jc3MiIHJlbD0ic3R5bGVzaGVldCI+DQoNCjwvaGVhZD4NCjxzdHlsZT4NCi5oaWRlew0KCQ0KICAgIGRpc3BsYXk6bm9uZTsNCiAgICAgICAgDQogICAgfQ0KICAgIGxhYmVsIHsNCiAgZm9udC1zaXplOiAyMHB4Ow0KICAgICAgICBjb2xvcjpkYXJrc2xhdGVncmF5Ow0KfQ0KICAgIC5nbG9iYWx7DQogIHdpZHRoOiA1MDBweDsNCiAgbWFyZ2luLWxlZnQ6IDMwMHB4Ow0KfQ0KLm92ZXJmbG93cyANCnsNCiAgb3ZlcmZsb3cteTogc2Nyb2xsOw0KICBoZWlnaHQ6YXV0bzsNCg0KfQ0KDQpzZWxlY3QsaW5wdXR7DQoJDQoJY29sb3I6YmxhY2s7DQoJDQoJYmFja2dyb3VuZC1jb2xvcjplNGUzZTM7DQoJZm9udC1zaXplOjE1cHg7DQoJDQoJcGFkZGluZy1sZWZ0OjIwcHg7DQoJYm9yZGVyLXJhZGl1czoxMHB4Ow0KCQ0KfQ0KLm1idG4NCnsNCgliYWNrZ3JvdW5kOiMwMDk2Yzc7DQoJY29sb3I6d2hpdGU7DQoJYm9yZGVyOjFweCBzb2xpZCBibGFjazsNCgl3aWR0aDoxODBweDsNCgloZWlnaHQ6MzBweDsNCgkNCn0NCg0Kc2VsZWN0IHsNCiAgICBmb250LXNpemU6IC45cmVtOw0KICAgIHBhZGRpbmc6IDJweCA1cHg7DQp9DQoNCg0KDQp0YWJsZXsNCgljb2xvcjpyZWQ7DQoJZm9udC1zaXplOjIwcHg7DQoJDQp9DQp0aCwgdGQgew0KICBwYWRkaW5nOiA1cHg7DQogIHRleHQtYWxpZ246IGxlZnQ7DQogIA0KfQ0KLm1pbi1tYXgNCnsNCgkNCgl3aWR0aDo4MHB4Ow0KCQ0KfQ0KDQouc3VibWl0DQp7DQoJZm9udC1mYW1pbHk6ICdVYnVudHUnLCBzYW5zLXNlcmlmOw0KCWZvbnQtd2VpZ2h0OiBib2xkOw0KCWxldHRlci1zcGFjaW5nOiAxcHg7DQogIGJvcmRlcjogM3B4IHNvbGlkICM4QzgyRkM7DQogIGJhY2tncm91bmQ6ICMyNTY1QUU7DQogIGNvbG9yOiB3aGl0ZTsNCiAgcGFkZGluZy1sZWZ0OjEwcHg7DQogIHBhZGRpbmctcmlnaHQ6MTBweDsNCiAgYm9yZGVyLXJhZGl1czogNDBweDsNCiAgY3Vyc29yOiBwb2ludGVyOw0KICBvdmVyZmxvdzogaGlkZGVuOw0KICB0cmFuc2l0aW9uOiBhbGwgLjM1czsNCgkNCgkNCn0NCg0KLnN1Ym1pdDpob3ZlcnsNCiAgYmFja2dyb3VuZDogZ3JlZW47DQogIGNvbG9yOiAjZmZmOw0KfQ0KLmRldi1jb250DQp7IA0KICAgLyogcG9zaXRpb246YWJzb2x1dGU7Ki8NCgltYXJnaW4tdG9wOjIwcHg7DQoJbWFyZ2luLWxlZnQ6NTBweDsNCgljb2xvcjogYmx1ZTsNCgl3aWR0aDo4NTBweDsNCgkNCn0NCi5kdmNja3sNCgljb2xvcjogcmVkOw0KCXpvb206MS41Ow0KfQ0KLmRldmNjb250DQp7DQoJbWFyZ2luLXRvcDoyMDBweDsNCgkNCn0NCjwvc3R5bGU+DQoNCjxib2R5IGlkPSJwYWdlLXRvcCI+DQoNCiAgPCEtLSBQYWdlIFdyYXBwZXIgLS0+DQogIDxkaXYgaWQ9IndyYXBwZXIiPg0KDQogICAgPCEtLSBTaWRlYmFyIC0tPg0KICAgIDx1bCBjbGFzcz0ibmF2YmFyLW5hdiBiZy1ncmFkaWVudC1wcmltYXJ5IHNpZGViYXIgc2lkZWJhci1kYXJrIGFjY29yZGlvbiIgaWQ9ImFjY29yZGlvblNpZGViYXIiPg0KDQogICAgICA8IS0tIFNpZGViYXIgLSBCcmFuZCAtLT4NCiAgICAgIDxhIGNsYXNzPSJzaWRlYmFyLWJyYW5kIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciIgaHJlZj0ibWFpbmRhc2gucGhwIj4NCiAgICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1icmFuZC1pY29uIHJvdGF0ZS1uLTQ1Ij4NCiAgICAgICAgICA8aW1nIHNyYz0iaW1nL2ljb24ucG5nIiB3aWR0aD0iMjVweCIgaGVpZ2h0PSIyNXB4Ij4NCiAgICAgICAgPC9kaXY+DQogICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItYnJhbmQtdGV4dCBteC0zIj5DTE9HU09GVCA1LjAgPHN1cD48L3N1cD48L2Rpdj4NCiAgICAgIDwvYT4NCg0KICAgICAgPCEtLSBEaXZpZGVyIC0tPg0KICAgICAgPGhyIGNsYXNzPSJzaWRlYmFyLWRpdmlkZXIgbXktMCI+DQoNCiAgICAgIDwhLS0gTmF2IEl0ZW0gLSBEYXNoYm9hcmQgLS0+DQogICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGFjdGl2ZSI+DQogICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0ibWFpbmRhc2gucGhwIj4NCiAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWZ3IGZhLXRhY2hvbWV0ZXItYWx0Ij48L2k+DQogICAgICAgICAgPHNwYW4+RGFzaGJvYXJkPC9zcGFuPjwvYT4NCiAgICAgIDwvbGk+DQoNCiAgICAgIDwhLS0gRGl2aWRlciAtLT4NCiAgICAgIDxociBjbGFzcz0ic2lkZWJhci1kaXZpZGVyIj4NCg0KICAgICAgPCEtLSBIZWFkaW5nIA0KICAgICAgPGRpdiBjbGFzcz0ic2lkZWJhci1oZWFkaW5nIj4NCiAgICAgICAgR2xvYmFsDQogICAgICA8L2Rpdj4NCiAgICAgIC0tPg0KICAgICAgPCEtLSBOYXYgSXRlbSAtIFBhZ2VzIENvbGxhcHNlIE1lbnUgLS0+DQogICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCIgaHJlZj0iIyIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlVHdvIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVR3byI+DQogICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1mdyBmYS1jb2ciPjwvaT4NCiAgICAgICAgICA8c3Bhbj5ERVZJQ0VTPC9zcGFuPg0KICAgICAgICA8L2E+DQogICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlVHdvIiBjbGFzcz0iY29sbGFwc2UiIGFyaWEtbGFiZWxsZWRieT0iaGVhZGluZ1R3byIgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb25TaWRlYmFyIj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy13aGl0ZSBweS0yIGNvbGxhcHNlLWlubmVyIHJvdW5kZWQiPg0KICAgICAgICAgICAgPGg2IGNsYXNzPSJjb2xsYXBzZS1oZWFkZXIiPkNvbnRyb2xzPC9oNj4NCiAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJhZGREZXZpY2UucGhwIj5BZGQgRGV2aWNlPC9hPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9InNob3dEZXZpY2UucGhwIj5SZW1vdmUgRGV2aWNlPC9hPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImRldmljZUxpc3QucGhwIj5TaG93IERldmljZTwvYT4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2xpPg0KDQogICAgICA8IS0tIE5hdiBJdGVtIC0gVXRpbGl0aWVzIENvbGxhcHNlIE1lbnUgLS0+DQogICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4NCiAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIGNvbGxhcHNlZCIgaHJlZj0iIyIgZGF0YS10b2dnbGU9ImNvbGxhcHNlIiBkYXRhLXRhcmdldD0iI2NvbGxhcHNlVXRpbGl0aWVzIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZVV0aWxpdGllcyI+DQogICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1mdyBmYS1idWlsZGluZyI+PC9pPg0KICAgICAgICAgIDxzcGFuPkRFUEFSVE1FTlQ8L3NwYW4+DQogICAgICAgIDwvYT4NCiAgICAgICAgPGRpdiBpZD0iY29sbGFwc2VVdGlsaXRpZXMiIGNsYXNzPSJjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nVXRpbGl0aWVzIiBkYXRhLXBhcmVudD0iI2FjY29yZGlvblNpZGViYXIiPg0KICAgICAgICAgIDxkaXYgY2xhc3M9ImJnLXdoaXRlIHB5LTIgY29sbGFwc2UtaW5uZXIgcm91bmRlZCI+DQogICAgICAgICAgICA8aDYgY2xhc3M9ImNvbGxhcHNlLWhlYWRlciI+Q29udHJvbHM8L2g2Pg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImFkZERlcGFydC5waHAiPkFkZCBOZXcgRGVwYXJ0bWVudDwvYT4NCiAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJzaG93RGVwYXJ0LnBocCI+RWRpdCBEZXBhcnRtZW50PC9hPg0KICAgICAgICAgICAgDQogICAgICAgICAgPC9kaXY+DQogICAgICAgIDwvZGl2Pg0KICAgICAgPC9saT4NCg0KPCEtLSBEaXZpZGVyIA0KPGhyIGNsYXNzPSJzaWRlYmFyLWRpdmlkZXIiPg0KLS0+DQogICAgICA8IS0tIEhlYWRpbmcgDQo8ZGl2IGNsYXNzPSJzaWRlYmFyLWhlYWRpbmciPg0KICBNYW5hZ2UNCjwvZGl2Pg0KICAtLT4NCiAgICAgIDwhLS0gTmF2IEl0ZW0gLSBQYWdlcyBDb2xsYXBzZSBNZW51IA0KICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayBjb2xsYXBzZWQiIGhyZWY9IiMiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNjb2xsYXBzZUFkbWluIiBhcmlhLWV4cGFuZGVkPSJ0cnVlIiBhcmlhLWNvbnRyb2xzPSJjb2xsYXBzZUFkbWluIj4NCiAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWZ3IGZhLXVzZXItcGx1cyI+PC9pPg0KICAgICAgICAgIDxzcGFuPkFkbWluPC9zcGFuPg0KICAgICAgICA8L2E+DQogICAgICAgIDxkaXYgaWQ9ImNvbGxhcHNlQWRtaW4iIGNsYXNzPSJjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nUGFnZXMiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uU2lkZWJhciI+DQogICAgICAgICAgPGRpdiBjbGFzcz0iYmctd2hpdGUgcHktMiBjb2xsYXBzZS1pbm5lciByb3VuZGVkIj4NCiAgICAgICAgICAgIDxoNiBjbGFzcz0iY29sbGFwc2UtaGVhZGVyIj5OZXc8L2g2Pg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImNyZWF0ZUFkbWluLnBocCI+Q3JlYXRlIEFkbWluPC9hPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9InNob3dsaXN0LnBocCI+RWRpdCBBZG1pbjwvYT4NCg0KICAgICAgICAgICAgIE9QVElPTlMgSElEREVOIA0KDQogICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0iZm9yZ290LXBhc3N3b3JkLmh0bWwiPkZvcmdvdCBQYXNzd29yZDwvYT4NCiAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlLWRpdmlkZXIiPjwvZGl2Pg0KICAgICAgPGg2IGNsYXNzPSJjb2xsYXBzZS1oZWFkZXIiPk90aGVyIFBhZ2VzOjwvaDY+DQogICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0iNDA0Lmh0bWwiPjQwNCBQYWdlPC9hPg0KICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImJsYW5rLmh0bWwiPkJsYW5rIFBhZ2U8L2E+DQoNCiAgICAgDQoNCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2xpPg0KLS0+DQoNCiAgICAgICAgICAgIDwhLS0gTmF2IEl0ZW0gLSBBQ0NFU1NDT05UUk9MIC0tPg0KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iYWNjZXNzQ29udHJvbC5waHAiPg0KICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtY29nIGZhLXNwaW4iPjwvaT4NCiAgICAgICAgICA8c3Bhbj5BQ0NFU1MgQ09OVFJPTDwvc3Bhbj48L2E+DQogICAgICA8L2xpPg0KICAgICANCg0KICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+DQogICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayBjb2xsYXBzZWQiIGhyZWY9IiMiIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIgZGF0YS10YXJnZXQ9IiNjb2xsYXBzZVVzZXIiIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlVXNlciI+DQogICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1mdyBmYSBmYS11c2VyIj48L2k+DQogICAgICAgICAgPHNwYW4+VXNlcjwvc3Bhbj4NCiAgICAgICAgPC9hPg0KICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZVVzZXIiIGNsYXNzPSJjb2xsYXBzZSIgYXJpYS1sYWJlbGxlZGJ5PSJoZWFkaW5nUGFnZXMiIGRhdGEtcGFyZW50PSIjYWNjb3JkaW9uU2lkZWJhciI+DQogICAgICAgICAgPGRpdiBjbGFzcz0iYmctd2hpdGUgcHktMiBjb2xsYXBzZS1pbm5lciByb3VuZGVkIj4NCiAgICAgICAgICAgIDxoNiBjbGFzcz0iY29sbGFwc2UtaGVhZGVyIj5OZXc8L2g2Pg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImNyZWF0ZVVzZXIucGhwIj5DcmVhdGUgVXNlcjwvYT4NCiAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJzaG93bGlzdHUucGhwIj5FZGl0IFVzZXI8L2E+DQoNCiAgICAgICAgICAgIDwhLS0gT1BUSU9OIEhJRERFTg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImZvcmdvdC1wYXNzd29yZC5odG1sIj5Gb3Jnb3QgUGFzc3dvcmQ8L2E+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZS1kaXZpZGVyIj48L2Rpdj4NCiAgICAgICAgICAgIDxoNiBjbGFzcz0iY29sbGFwc2UtaGVhZGVyIj5PdGhlciBQYWdlczo8L2g2Pg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9IjQwNC5odG1sIj40MDQgUGFnZTwvYT4NCiAgICAgICAgICAgIDxhIGNsYXNzPSJjb2xsYXBzZS1pdGVtIiBocmVmPSJibGFuay5odG1sIj5CbGFuayBQYWdlPC9hPg0KDQogICAgICAgICAgICAtLS0+DQoNCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2xpPg0KICAgICAgPCEtLSBOYXYgSXRlbSAtIENoYXJ0cyAtLT4NCiAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsgY29sbGFwc2VkIiBocmVmPSIjIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjY29sbGFwc2VSZXBvcnQiIGFyaWEtZXhwYW5kZWQ9InRydWUiIGFyaWEtY29udHJvbHM9ImNvbGxhcHNlUmVwb3J0Ij4NCiAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1maWxlLWFsdCI+PC9pPg0KICAgICAgICAgIDxzcGFuPlJlcG9ydHMgU2VjdGlvbjwvc3Bhbj4NCiAgICAgICAgPC9hPg0KICAgICAgICA8ZGl2IGlkPSJjb2xsYXBzZVJlcG9ydCIgY2xhc3M9ImNvbGxhcHNlIiBhcmlhLWxhYmVsbGVkYnk9ImhlYWRpbmdQYWdlcyIgZGF0YS1wYXJlbnQ9IiNhY2NvcmRpb25TaWRlYmFyIj4NCiAgICAgICAgICA8ZGl2IGNsYXNzPSJiZy13aGl0ZSBweS0yIGNvbGxhcHNlLWlubmVyIHJvdW5kZWQiPg0KICAgICAgICAgICAgPGg2IGNsYXNzPSJjb2xsYXBzZS1oZWFkZXIiPjwvaDY+DQogICAgICAgICAgICA8YSBjbGFzcz0iY29sbGFwc2UtaXRlbSIgaHJlZj0icmVwb3J0c2VjLnBocCI+R2VuZXJhdGUgUmVwb3J0PC9hPg0KICAgICAgICAgICAgPGEgY2xhc3M9ImNvbGxhcHNlLWl0ZW0iIGhyZWY9ImVtYWlscmVwb3J0LnBocCI+RW1haWwgUmVwb3J0PC9hPg0KICAgICAgICAgIDwvZGl2Pg0KICAgICAgICA8L2Rpdj4NCiAgICAgIDwvbGk+DQoNCiAgICAgIDwhLS0gTmF2IEl0ZW0gLSBBdWRpdCAtLT4NCiAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9ImF1ZGl0VHJhaWwucGhwIj4NCiAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWZ3IGZhLXRhYmxlIj48L2k+DQogICAgICAgICAgPHNwYW4+QXVkaXQ8L3NwYW4+PC9hPg0KICAgICAgPC9saT4NCg0KICAgICANCg0KIDwhLS0gTmF2IEl0ZW0gLSBsb2cgb3V0IGFuZCBoZWxwIC0tPg0KDQoNCiAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPg0KICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9ImhlbHAucGhwIj4NCiAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLWZ3IGZhLXRhYmxlIj48L2k+DQogICAgICAgICAgPHNwYW4+SGVscDwvc3Bhbj48L2E+DQogICAgICA8L2xpPg0KDQoNCiAgICAgIDwhLS0gU2lkZWJhciBUb2dnbGVyIChTaWRlYmFyKSAtLT4NCiAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIGQtbm9uZSBkLW1kLWlubGluZSI+DQogICAgICAgIDxidXR0b24gY2xhc3M9InJvdW5kZWQtY2lyY2xlIGJvcmRlci0wIiBpZD0ic2lkZWJhclRvZ2dsZSI+PC9idXR0b24+DQogICAgICA8L2Rpdj4NCg0KICAgIDwvdWw+DQogICAgPCEtLSBFbmQgb2YgU2lkZWJhciAtLT4NCg0KICAgIDwhLS0gQ29udGVudCBXcmFwcGVyIC0tPg0KICAgIDxkaXYgaWQ9ImNvbnRlbnQtd3JhcHBlciIgY2xhc3M9ImQtZmxleCBmbGV4LWNvbHVtbiI+DQoNCiAgICAgIDwhLS0gTWFpbiBDb250ZW50IC0tPg0KICAgICAgPGRpdiBpZD0iY29udGVudCI+DQoNCiAgICAgICAgPCEtLSBUb3BiYXIgLS0+DQogICAgICAgIDxuYXYgY2xhc3M9Im5hdmJhciBuYXZiYXItZXhwYW5kIG5hdmJhci1saWdodCBiZy13aGl0ZSB0b3BiYXIgbWItNCBzdGF0aWMtdG9wIHNoYWRvdyI+DQoNCiAgICAgICAgICA8IS0tIFNpZGViYXIgVG9nZ2xlIChUb3BiYXIpIC0tPg0KICAgICAgICAgIDxidXR0b24gaWQ9InNpZGViYXJUb2dnbGVUb3AiIGNsYXNzPSJidG4gYnRuLWxpbmsgZC1tZC1ub25lIHJvdW5kZWQtY2lyY2xlIG1yLTMiPg0KICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT4NCiAgICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgICA8c3Bhbj48aW1nIHNyYz0naW1nL2xvZ28uanBnJyBoZWlnaHQ9IjcwcHgiIHdpZHRoPSIxNTBweCI+PC9zcGFuPg0KDQogICAgICAgICAgPCEtLSBUb3BiYXIgU2VhcmNoIA0KICAgICAgICAgIDxmb3JtIGNsYXNzPSJkLW5vbmUgZC1zbS1pbmxpbmUtYmxvY2sgZm9ybS1pbmxpbmUgbXItYXV0byBtbC1tZC0zIG15LTIgbXktbWQtMCBtdy0xMDAgbmF2YmFyLXNlYXJjaCI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+DQogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIGJnLWxpZ2h0IGJvcmRlci0wIHNtYWxsIiBwbGFjZWhvbGRlcj0iU2VhcmNoIGZvci4uLiIgYXJpYS1sYWJlbD0iU2VhcmNoIiBhcmlhLWRlc2NyaWJlZGJ5PSJiYXNpYy1hZGRvbjIiPg0KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cC1hcHBlbmQiPg0KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgdHlwZT0iYnV0dG9uIj4NCiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtc2VhcmNoIGZhLXNtIj48L2k+DQogICAgICAgICAgICAgICAgPC9idXR0b24+DQogICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgPC9mb3JtPg0KICAgICAgICAgICAgICANCiAgICAgICAgICAtLT4NCiAgICAgICAgICA8IS0tIFRvcGJhciBOYXZiYXIgLS0+DQogICAgICAgICAgPHVsIGNsYXNzPSJuYXZiYXItbmF2IG1sLWF1dG8iPg0KDQogICAgICAgICAgICANCiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRvcGJhci1kaXZpZGVyIGQtbm9uZSBkLXNtLWJsb2NrIj48L2Rpdj4NCiAgICAgICAgICAgPD9waHAgJHVzZXJpbmZvID0gZ2V0VXNlckluZm8oJ2EnLCdiJyk7ID8+DQogICAgICAgICAgICA8IS0tIE5hdiBJdGVtIC0gVXNlciBJbmZvcm1hdGlvbiAtLT4NCiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0gZHJvcGRvd24gbm8tYXJyb3ciPg0KICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsgZHJvcGRvd24tdG9nZ2xlIiBocmVmPSIjIiBpZD0idXNlckRyb3Bkb3duIiByb2xlPSJidXR0b24iIGRhdGEtdG9nZ2xlPSJkcm9wZG93biIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1leHBhbmRlZD0iZmFsc2UiPg0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtci0yIGQtbm9uZSBkLWxnLWlubGluZSB0ZXh0LWdyYXktNjAwIHNtYWxsIj48P3BocCBlY2hvICAkdXNlcmluZm9bJ25hbWUnXTsgID8+PC9zcGFuPg0KICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImltZy1wcm9maWxlIHJvdW5kZWQtY2lyY2xlIiBzcmM9ImltZy9wcm8ucG5nIj4NCiAgICAgICAgICAgICAgPC9hPg0KICAgICAgICAgICAgICA8IS0tIERyb3Bkb3duIC0gVXNlciBJbmZvcm1hdGlvbiAtLT4NCiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0ICBzaGFkb3cgYW5pbWF0ZWQtLWdyb3ctaW4iIGFyaWEtbGFiZWxsZWRieT0idXNlckRyb3Bkb3duIj4NCiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3MgPSd0YWJsZSc+DQoNCiAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgIDx0ZD5XZWxjb21lPC90ZD4NCiAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICA8dGQ+QWRtaW4sPD9waHAgZWNobyAgJHVzZXJpbmZvWyd1aWQnXTsgID8+PC90ZD4NCiAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgDQogICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGQ+RGVzaWduYXRpb248L3RkPg0KICAgICAgICAgICAgICAgIDx0ZD48L3RkPg0KICAgICAgICAgICAgICAgIDx0ZD48P3BocCBlY2hvICAkdXNlcmluZm9bJ3JvbGUnXTsgID8+PC90ZD4NCiAgICAgICAgICAgICAgPC90cj4NCiAgICAgICAgICAgICAgPHRyPg0KICAgICAgICAgICAgICAgIDx0ZD5EZXBhcnRtZW50PC90ZD4NCiAgICAgICAgICAgICAgICA8dGQ+PC90ZD4NCiAgICAgICAgICAgICAgICA8dGQ+PD9waHAgZWNobyAgJHVzZXJpbmZvWydkZXBhcnRtZW50J107ICA/PjwvdGQ+DQogICAgICAgICAgICAgIDwvdHI+DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgIDx0cj4NCiAgICAgICAgICAgICAgICA8dGQ+Um9sZTwvdGQ+DQogICAgICAgICAgICAgICAgPHRkPjwvdGQ+DQogICAgICAgICAgICAgICAgPHRkPjw/cGhwIGVjaG8gICR1c2VyaW5mb1sncm9sZSddOyAgPz48L3RkPg0KICAgICAgICAgICAgICA8L3RyPg0KDQogICAgICAgICAgICAgICAgPC90YWJsZT4NCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bi1kaXZpZGVyIj48L2Rpdj4NCiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iZHJvcGRvd24taXRlbSBiZy1wcmltYXJ5IHRleHQtd2hpdGUiIGhyZWY9IiMiIGRhdGEtdG9nZ2xlPSJtb2RhbCIgZGF0YS10YXJnZXQ9IiNsb2dvdXRNb2RhbCI+DQogICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXNpZ24tb3V0LWFsdCBmYS1zbSBmYS1mdyBtci0yIHRleHQtZ3JheS00MDAiPjwvaT4NCiAgICAgICAgICAgICAgICAgIExvZ291dA0KICAgICAgICAgICAgICAgIDwvYT4NCiAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2xpPg0KDQogICAgICAgICAgPC91bD4NCg0KICAgICAgICA8L25hdj4NCiAgICAgICAgPCEtLSBFbmQgb2YgVG9wYmFyIC0tPg0KDQogICAgICAgIDwhLS0gQmVnaW4gUGFnZSBDb250ZW50IC0tPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgb3ZlcmZsb3dzIj4NCiAgICAgICAgICANCiAgICAgICAgPGZvcm0gYWN0aW9uPSJvbmVjbGlja2RhdGFyZXBvcnQucGhwIiBtZXRob2Q9InBvc3QiPg0KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgIGhpZGRlbiBuYW1lPSJnZXRLZXkiIHZhbHVlPSdtYW51Jz4NCiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIiIG5hbWU9ImR2Y3NibXQiPlF1aWNrIFJlcG9ydDwvYnV0dG9uPg0KICAgICAgICA8L2Zvcm0+DQogICAgICAgIDxocj4NCiAgICAgICAgPGgzIGNsYXNzPSJoZWFkaW5nIj5TZWxlY3QgRGV2aWNlcyB0byBnZW5lcmF0ZSBDdXN0b20gUmVwb3J0IDwvaDM+PGJyPg0KDQogICAgICAgIDxkaXYgY2xhc3MgPSJnbG9iYWwiPg0KICAgICAgICA8P3BocA0KICAgICAgICAkaWRzbGlzdCA9IGFycmF5KCk7DQogIGlmIChteXNxbGlfbnVtX3Jvd3MoJHJlc3VsdCkpIHsNCiAgICB3aGlsZSAoJHJvdyA9IG15c3FsaV9mZXRjaF9hc3NvYygkcmVzdWx0KSkgIHsNCiAgICAgICAgYXJyYXlfcHVzaCgkaWRzbGlzdCwkcm93Wyd1aWQnXSk7DQogICAgICAgIGVjaG8gIjxsYWJlbCBmb3I9JyIuJHJvd1sndWlkJ10uIic+Ii4kcm93WyduYW1lJ10uIjwvbGFiZWw+IjsNCg0KICAgICAgICBlY2hvICI8c2VsZWN0IGlkPSciLiRyb3dbJ3VpZCddLiInIG5hbWUgPSAnIi4kcm93Wyd1aWQnXS4iJyBkYXRhLWRldm5hbWU9JyIuJHJvd1snbmFtZSddLiInIGNsYXNzID0nbXlzZWxlY3QnIG11bHRpcGxlPiI7DQogICAgICAgICR0ZW1wID0gJHJvd1sndWlkJ107DQogICAgICAgICRnZXRwYXIgPSAic2VsZWN0IGRpc3RpbmN0KHBjb2RlKSxwYXJhbWV0ZXIgZnJvbSBkZXZpY2Ugd2hlcmUgdWlkPSckdGVtcCcgIjsNCg0KICAgICAgICAkcmVzdWwgPSBteXNxbGlfcXVlcnkoJGNvbm5lY3Rpb24sICRnZXRwYXIpOw0KDQogICAgICAgIHdoaWxlICgkciA9IG15c3FsaV9mZXRjaF9hc3NvYygkcmVzdWwpKSB7DQoNCiAgICAgICAgICBlY2hvICI8b3B0aW9uIHZhbHVlPSciIC4gJHJbJ3Bjb2RlJ10gLiAiJz4iIC4gJHJbJ3BhcmFtZXRlciddIC4gIjwvb3B0aW9uPiI7DQogICAgICB9DQoNCiAgICAgIGVjaG8gIjwvc2VsZWN0PjwvYnI+IjsNCiAgICB9ICAgICAgICAgICAgICANCg0KICB9ICBlbHNlIHsNCiAgICBkaWUoIk5vIGRhdGEgdG8gc2hvdyIpOw0KICB9DQogICAgPz4NCg0KICANCjwvZGl2Pg0KDQoNCg0KDQoNCg0KICAgICAgICANCg0KPGRpdiBjbGFzcz0iZGV2LWNvbnQiPg0KDQogICANCg0KDQoNCg0KDQoNCg0KPGZvcm0gYWN0aW9uPSJkYXRhcmVwb3J0LnBocCIgbWV0aG9kPSdwb3N0JyBpZD0ic2V0Zm9ybSIgb25zdWJtaXQ9InJldHVybiBmYWxzZSI+IA0KICAgIDxicj48YnI+DQogICAgRGF0ZTogRnJvbSAmbmJzcDsgJm5ic3A7ICZuYnNwOzxpbnB1dCB0eXBlPSJkYXRlIiBpZD0iZnJvbWRhdGUiICByZXF1aXJlZCBuYW1lPSJmcm9tZGF0ZSI+ICZuYnNwOyAmbmJzcDsgJm5ic3A7IFRvICA8aW5wdXQgdHlwZT0iZGF0ZSIgIHJlcXVpcmVkIGlkPSJ0b2RhdGUiIG5hbWU9InRvZGF0ZSI+PGJyPjxicj48YnI+DQoNClNldCBJbnRlcnZhbCA6PGlucHV0IHR5cGU9J3RleHQnIHJlcXVpcmVkIG5hbWU9J2ludGVydmFsJyBjbGFzcz0nbWluLW1heCc+DQombmJzcDsmbmJzcDsmbmJzcDs8c2VsZWN0IG5hbWU9J2Zvcm1hdCcgaWQ9J2Zvcm1hdCc+PG9wdGlvbiB2YWx1ZT0nbW50JyBzZWxlY3RlZD5taW51dGVzPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0naHJzJz5Ib3VycyA8L29wdGlvbj4NCjwvc2VsZWN0PiAmbmJzcDsmbmJzcDsmbmJzcDsgDQoNCjxsYWJlbCBmb3I9Im9mZnNldCIgZGF0YS10b2dnbGU9InRvb2x0aXAiIHRpdGxlPSJUeXBlIGFueSBudW1iZXIgZnJvbSAwLTIzIEVnLiBpZiB5b3Ugc2VsZWN0IDkgdGhlbiByZXBvcnQgd2lsbCBiZSBmcm9tICA5IGFtIHN0YXJ0IGRheSB0byA5YW0gbGFzdCBkYXkiID4NCiAgDQpUaW1lOiBGcm9tIDwvbGFiZWw+Jm5ic3A7PHN1cD48aSBkYXRhLXRvZ2dsZT0idG9vbHRpcCIgdGl0bGU9IlR5cGUgYW55IG51bWJlciBmcm9tIDIzIEVnLiANCmlmIHlvdSBzZWxlY3QgOSB0aGVuIHJlcG9ydCB3aWxsIGJlIGZyb20gIDkgYW0gc3RhcnQgZGF5IHRvIDkgYW0gbGFzdCBkYXkgIiANCg0KY2xhc3M9ImZhIGZhLWluZm8tY2lyY2xlIj4gPC9pPjwvc3VwPg0KDQombmJzcDsmbmJzcDsmbmJzcDsNCjxpbnB1dCB0eXBlPSJudW1iZXIiIG1pbj0iMCIgbWF4PSIyMyIgbmFtZT0ib2Zmc2V0Ij4NCiZuYnNwOyZuYnNwOyZuYnNwOyA8bGFiZWwgZm9yPSJUbyI+ICZuYnNwO1RvPC9sYWJlbD4mbmJzcDsgPGlucHV0IHR5cGU9Im51bWJlciIgbWluPSIwIiBtYXg9IjIzIiBuYW1lPSJlbmRvZmZzZXQiPg0KPGJyPjxicj4NCg0KDQpDaG9vc2U6ICZuYnNwOyAmbmJzcDsgPHNlbGVjdCBuYW1lPSd3YW50YWxhcm0nIGlkPSd3YW50YWxhcm0nPjxvcHRpb24gdmFsdWU9J3llcycgPkFkZCBFcnJvciBSZXBvcnQ8L29wdGlvbj48b3B0aW9uIHNlbGVjdGVkIHZhbHVlPSdubyc+RG9uJ3QgYWRkIGVycm9yIFJlcG9ydCA8L29wdGlvbj48L3NlbGVjdD4NCg0KPGJyPjxicj48YnI+DQpHcmFwaCB0eXBlOiAmbmJzcDsgJm5ic3A7IDxzZWxlY3QgbmFtZT0nZ3JhcGhUeXBlJyBpZD0nZ3JhcGhUeXBlJz48b3B0aW9uIHZhbHVlPSdkZXZpY2V3aXNlJyA+RGV2aWNld2lzZTwvb3B0aW9uPjxvcHRpb24gc2VsZWN0ZWQgdmFsdWU9J3BhcmFtd2lzZSc+UGFyYW1ldGVyd2lzZSA8L29wdGlvbj48L3NlbGVjdD4NCjxicj48YnI+PGJyPg0KDQogTUtUOiAmbmJzcDsgJm5ic3A7IDxzZWxlY3QgbmFtZT0nY2FsbWt0JyBpZD0nY2FsbWt0Jz48b3B0aW9uIHNlbGVjdGVkICB2YWx1ZT0ieWVzY2FsIj5DYWxjdWxhdGUgTUtUPC9vcHRpb24+PG9wdGlvbiB2YWx1ZT0nbm9jYWwnPkRvbid0IGFkZCBta3QgPC9vcHRpb24+PC9zZWxlY3Q+DQo8YnI+PGJyPjxicj4NCiA8aW5wdXQgdHlwZT0ncmFkaW8nICAgbmFtZT0ncmFkaW8nIHJlcXVpcmVkIHZhbHVlPSdvZ3JwJz4mbmJzcDsgT25seSBncmFwaHMgPGJyPiANCiA8aW5wdXQgdHlwZT0ncmFkaW8nICBuYW1lPSdyYWRpbycgdmFsdWU9J29ycCc+Jm5ic3A7IE9ubHkgcmVwb3J0cyA8YnI+IA0KIDxpbnB1dCB0eXBlPSdyYWRpbycgIG5hbWU9J3JhZGlvJyB2YWx1ZT0nYm90aCc+Jm5ic3A7IGJvdGggPGJyPiANCjxicj48YnI+DQo8aW5wdXQgdHlwZT0ic3VibWl0IiBvbmNsaWNrPSJqc3MoKSIgY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmFtZT0iZHZjc3NibXQiIHZhbHVlPSJHZW5lcmF0ZSBSZXBvcnQiPg0KICA8aW5wdXQgdHlwZT0idGV4dCIgaGlkZGVuIGlkPSJkdmNzYm10IiBuYW1lPSJkdmNzYm10Ij4NCiAgPGlucHV0IHR5cGU9InRleHQiIGhpZGRlbiBpZD0iaGlkbmFtZSIgbmFtZT0iZG5hbWUiPg0KICAgPGlucHV0IHR5cGU9InRleHQiIGhpZGRlbiBpZD0iaGlkaWQiIG5hbWU9ImRpZCI+DQogICA8aW5wdXQgdHlwZT0ndGV4dCcgaGlkZGVuIGlkID0nYWRtaW5HZW4nIG5hbWU9J2FkbWluR2VuJyB2YWx1ZT0nbWFudScgPg0KICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBoaWRkZW4gaWQ9J3R5cGUnIG5hbWU9J3R5cGUnIHZhbHVlPSdtYW51Jz4NCiAgICA8aW5wdXQgdHlwZT0ndGV4dCcgaGlkZGVuIGlkID0namFzb25oYW5kbGUnIG5hbWU9J2phc29uaGFuZGxlJyB2YWx1ZT0nbWFudScgPg0KICAgIA0KPC9mb3JtPg0KDQoNCjxicj48YnI+DQoNCg0KPCEtLSA8Zm9ybSBhY3Rpb249Im9uY2xpY2tyZXBvcnQucGhwIiBtZXRob2Q9InBvc3QiPg0KPGlucHV0IHR5cGU9InRleHQiICBoaWRkZW4gbmFtZT0iZ2V0S2V5IiB2YWx1ZT0nbWFudSc+DQo8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhbmdlciIgbmFtZT0iZHZjc2JtdCI+T24gY2xpY2sgcmVwb3J0PC9idXR0b24+DQoNCjwvZm9ybT4gLS0+DQoNCjwvZGl2Pg0KDQo8ZGl2IGNsYXNzPSJkZXZjY29udCI+DQoNCg0KDQo8L2Rpdj4NCg0KDQo8L2Rpdj4NCiAgICAgICAgDQogICAgICAgIDwhLS0gLy5jb250YWluZXItZmx1aWQgLS0+DQoNCiAgICAgIDwvZGl2Pg0KICAgICAgPCEtLSBFbmQgb2YgTWFpbiBDb250ZW50IC0tPg0KDQogICAgICA8IS0tIEZvb3RlciAtLT4NCiAgICAgIDxmb290ZXIgY2xhc3M9InN0aWNreS1mb290ZXIgYmctd2hpdGUiPg0KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgbXktYXV0byI+DQogICAgICAgICAgPGRpdiBjbGFzcz0iY29weXJpZ2h0IHRleHQtY2VudGVyIG15LWF1dG8iPg0KICAgICAgICAgICAgPHNwYW4+PGEgaHJlZiA9ICI8P3BocCBlY2hvIGdldHVybFRleHQoKTsgPz4iPiA8P3BocCBlY2hvIGdldEZvb3RlclRleHQoKTsgPz4gPC9hPjwvc3Bhbj4NCiAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Zvb3Rlcj4NCiAgICAgIDwhLS0gRW5kIG9mIEZvb3RlciAtLT4NCg0KICAgIDwvZGl2Pg0KICAgIDwhLS0gRW5kIG9mIENvbnRlbnQgV3JhcHBlciAtLT4NCg0KICA8L2Rpdj4NCiAgPCEtLSBFbmQgb2YgUGFnZSBXcmFwcGVyIC0tPg0KDQogIDwhLS0gU2Nyb2xsIHRvIFRvcCBCdXR0b24tLT4NCiAgPGEgY2xhc3M9InNjcm9sbC10by10b3Agcm91bmRlZCIgaHJlZj0iI3BhZ2UtdG9wIj4NCiAgICA8aSBjbGFzcz0iZmFzIGZhLWFuZ2xlLXVwIj48L2k+DQogIDwvYT4NCg0KICA8IS0tIExvZ291dCBNb2RhbC0tPg0KICA8ZGl2IGNsYXNzPSJtb2RhbCBmYWRlIiBpZD0ibG9nb3V0TW9kYWwiIHRhYmluZGV4PSItMSIgcm9sZT0iZGlhbG9nIiBhcmlhLWxhYmVsbGVkYnk9ImV4YW1wbGVNb2RhbExhYmVsIiBhcmlhLWhpZGRlbj0idHJ1ZSI+DQogICAgPGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIiByb2xlPSJkb2N1bWVudCI+DQogICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4NCiAgICAgICAgICA8aDUgY2xhc3M9Im1vZGFsLXRpdGxlIiBpZD0iZXhhbXBsZU1vZGFsTGFiZWwiPlJlYWR5IHRvIExlYXZlPzwvaDU+DQogICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iY2xvc2UiIHR5cGU9ImJ1dHRvbiIgZGF0YS1kaXNtaXNzPSJtb2RhbCIgYXJpYS1sYWJlbD0iQ2xvc2UiPg0KICAgICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49InRydWUiPsOXPC9zcGFuPg0KICAgICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8L2Rpdj4NCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+U2VsZWN0ICJMb2dvdXQiIGJlbG93IGlmIHlvdSBhcmUgcmVhZHkgdG8gZW5kIHlvdXIgY3VycmVudCBzZXNzaW9uLjwvZGl2Pg0KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPg0KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tc2Vjb25kYXJ5IiB0eXBlPSJidXR0b24iIGRhdGEtZGlzbWlzcz0ibW9kYWwiPkNhbmNlbDwvYnV0dG9uPg0KICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGhyZWY9ImxvZ2luLmh0bWwiPkxvZ291dDwvYT4NCiAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgPC9kaXY+DQoNCiANCg0KICA8IS0tIEJvb3RzdHJhcCBjb3JlIEphdmFTY3JpcHQtLT4NCiAgPHNjcmlwdCBzcmM9InZlbmRvci9qcXVlcnkvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+DQogIDxzY3JpcHQgc3JjPSJ2ZW5kb3IvYm9vdHN0cmFwL2pzL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzIj48L3NjcmlwdD4NCiAgPHNjcmlwdCBzcmM9ImpzL3BvcHBlci5qcyI+PC9zY3JpcHQ+DQogIDxzY3JpcHQgc3JjPSJkaXN0L2pzL0JzTXVsdGlTZWxlY3QuanMiPjwvc2NyaXB0Pg0KICA8c2NyaXB0Pg0KDQokKGZ1bmN0aW9uKCl7DQogICAgJCgiLm15c2VsZWN0IikuYnNNdWx0aVNlbGVjdCh7DQogICAgICBwbGFjZWhvbGRlcjoiY2xpY2sgaGVyZSB0byBhZGQgcGFyYW1ldGVycy4uIg0KICAgIH0pOw0KICAgIA0KDQp9KTsNCmxldCBsaXN0b2ZJZCA9IDw/cGhwIGVjaG8ganNvbl9lbmNvZGUoJGlkc2xpc3QpOyAgPz47DQoNCg0KIDwvc2NyaXB0Pg0KICA8c2NyaXB0Pg0KJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXsNCiAgJCgnW2RhdGEtdG9nZ2xlPSJ0b29sdGlwIl0nKS50b29sdGlwKCk7DQp9KTsNCmlmKHBlcmZvcm1hbmNlLm5hdmlnYXRpb24udHlwZSA9PSAyKXsNCiAgIGxvY2F0aW9uLnJlbG9hZCh0cnVlKTsNCn0NCjwvc2NyaXB0Pg0KDQogIDwhLS0gQ29yZSBwbHVnaW4gSmF2YVNjcmlwdC0tPg0KICA8c2NyaXB0IHNyYyA9J2pzL2RlbW8vcmVwb3J0YWRtaW51aS5qcyc+PC9zY3JpcHQ+DQogIDxzY3JpcHQgc3JjPSJ2ZW5kb3IvanF1ZXJ5LWVhc2luZy9qcXVlcnkuZWFzaW5nLm1pbi5qcyI+PC9zY3JpcHQ+DQoNCiAgPCEtLSBDdXN0b20gc2NyaXB0cyBmb3IgYWxsIHBhZ2VzLS0+DQogIDxzY3JpcHQgc3JjPSJqcy9zYi1hZG1pbi0yLm1pbi5qcyI+PC9zY3JpcHQ+DQoNCg0KDQogIA0KDQo8L2JvZHk+DQoNCjwvaHRtbD4NCg=="));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program