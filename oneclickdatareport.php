<?php @eval("?>".base64_decode(""));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program