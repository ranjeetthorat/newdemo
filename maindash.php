<?php @eval("?>".base64_decode("<?php include('includes/getuserinfo.php');
include('includes/graphData.php');

session_start();
$mid = '';

if (!($_SESSION['mloggedin'] == true)) {
  header("location:index.php");
} else {
  $mid = $_SESSION['manulogged'];
}

?>

<!DOCTYPE html>
<html lang="en">
<title>Clogsoft 5.0</title>

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">
  <link rel="icon" href="img/icon.png">
  <script src="vendor/chart.js/Chart.min.js"></script>
  <title>Clogsoft 5.0</title>

  <!-- Custom fonts for this template-->
  <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">


  <!-- Custom styles for this template-->
  <link href="css/sb-admin-2.css" rel="stylesheet">

</head>
<style>
  .overflows {
    overflow-y: scroll;
    height: 700px;

  }

  #loadingdiv {
    position: fixed;
    width: 100%;
    height: 100%;
    background: #fff url('img/my3.gif') no-repeat center;
    z-index: 999;

  }

  .values {
    font-size: 20px;
  }
</style>

<body id="page-top">
  <div id='loadingdiv'></div>

  <!-- Page Wrapper -->
  <div id="wrapper">

    <!-- Sidebar -->
    <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

      <!-- Sidebar - Brand -->
      <a class="sidebar-brand d-flex align-items-center justify-content-center" href="maindash.php">
        <div class="sidebar-brand-icon rotate-n-45">
          <img src="img/icon.png" width="25px" height="25px">
        </div>
        <div class="sidebar-brand-text mx-3">CLOGSOFT 5.0 <sup></sup></div>
      </a>

      <!-- Divider -->
      <hr class="sidebar-divider my-0">

      <!-- Nav Item - Dashboard -->
      <li class="nav-item active">
        <a class="nav-link" href="maindash.php">
          <i class="fas fa-fw fa-tachometer-alt"></i>
          <span>Dashboard</span></a>
      </li>

      <!-- Divider -->
      <hr class="sidebar-divider">

      <!-- Heading 
<div class="sidebar-heading">
  Global
</div>
-->
      <!-- Nav Item - Pages Collapse Menu -->
      <li class="nav-item">
        <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
          <i class="fas fa-fw fa-cog"></i>
          <span>DEVICES</span>
        </a>
        <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionSidebar">
          <div class="bg-white py-2 collapse-inner rounded">
            <h6 class="collapse-header">Controls</h6>
            <a class="collapse-item" href="addDevice.php">Add Device</a>
            <a class="collapse-item" href="showDevice.php">Remove Device</a>
            <a class="collapse-item" href="deviceList.php">Show Device</a>
          </div>
        </div>
      </li>

      <!-- Nav Item - Utilities Collapse Menu -->
      <li class="nav-item">
        <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseUtilities" aria-expanded="true" aria-controls="collapseUtilities">
          <i class="fas fa-fw fa-building"></i>
          <span>DEPARTMENT</span>
        </a>
        <div id="collapseUtilities" class="collapse" aria-labelledby="headingUtilities" data-parent="#accordionSidebar">
          <div class="bg-white py-2 collapse-inner rounded">
            <h6 class="collapse-header">Controls</h6>
            <a class="collapse-item" href="addDepart.php">Add New Department</a>
            <a class="collapse-item" href="showDepart.php">Edit Department</a>

          </div>
        </div>
      </li>

      <!-- Divider 
<hr class="sidebar-divider">
-->
      <!-- Heading 
<div class="sidebar-heading">
  Manage
</div>
  -->
      <!-- Nav Item - Pages Collapse Menu 
      <li class="nav-item">
        <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseAdmin" aria-expanded="true" aria-controls="collapseAdmin">
          <i class="fas fa-fw fa-user-plus"></i>
          <span>Admin</span>
        </a>
        <div id="collapseAdmin" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar">
          <div class="bg-white py-2 collapse-inner rounded">
            <h6 class="collapse-header">New</h6>
            <a class="collapse-item" href="createAdmin.php">Create Admin</a>
            <a class="collapse-item" href="showlist.php">Edit Admin</a>

             OPTIONS HIDDEN 

      <a class="collapse-item" href="forgot-password.html">Forgot Password</a>
      <div class="collapse-divider"></div>
      <h6 class="collapse-header">Other Pages:</h6>
      <a class="collapse-item" href="404.html">404 Page</a>
      <a class="collapse-item" href="blank.html">Blank Page</a>

     

          </div>
        </div>
      </li>
-->

      <!-- Nav Item - ACCESSCONTROL -->
      <li class="nav-item">
        <a class="nav-link" href="accessControl.php">
          <i class="fas fa-cog fa-spin"></i>
          <span>ACCESS CONTROL</span></a>
      </li>



      <li class="nav-item">
        <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseUser" aria-expanded="true" aria-controls="collapseUser">
          <i class="fas fa-fw fa fa-user"></i>
          <span>User</span>
        </a>
        <div id="collapseUser" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar">
          <div class="bg-white py-2 collapse-inner rounded">
            <h6 class="collapse-header">New</h6>
            <a class="collapse-item" href="createUser.php">Create User</a>
            <a class="collapse-item" href="showlistu.php">Edit User</a>

            <!-- OPTION HIDDEN
      <a class="collapse-item" href="forgot-password.html">Forgot Password</a>
      <div class="collapse-divider"></div>
      <h6 class="collapse-header">Other Pages:</h6>
      <a class="collapse-item" href="404.html">404 Page</a>
      <a class="collapse-item" href="blank.html">Blank Page</a>

      --->

          </div>
        </div>
      </li>
      <!-- Nav Item - Charts -->
      <li class="nav-item">
        <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseReport" aria-expanded="true" aria-controls="collapseReport">
          <i class="fas fa-file-alt"></i>
          <span>Reports Section</span>
        </a>
        <div id="collapseReport" class="collapse" aria-labelledby="headingPages" data-parent="#accordionSidebar">
          <div class="bg-white py-2 collapse-inner rounded">
            <h6 class="collapse-header"></h6>
            <a class="collapse-item" href="reportsec.php">Generate Report</a>
            <a class="collapse-item" href="emailreport.php">Email Report</a>
          </div>
        </div>
      </li>

      <!-- Nav Item - Audit -->
      <li class="nav-item">
        <a class="nav-link" href="auditTrail.php">
          <i class="fas fa-fw fa-table"></i>
          <span>Audit</span></a>
      </li>



      <!-- Nav Item - log out and help -->


      <li class="nav-item">
        <a class="nav-link" href="help.php">
          <i class="fas fa-fw fa-table"></i>
          <span>Help</span></a>
      </li>


      <!-- Sidebar Toggler (Sidebar) -->
      <div class="text-center d-none d-md-inline">
        <button class="rounded-circle border-0" id="sidebarToggle"></button>
      </div>

    </ul>
    <!-- End of Sidebar -->

    <!-- Content Wrapper -->
    <div id="content-wrapper" class="d-flex flex-column">

      <!-- Main Content -->
      <div id="content">

        <!-- Topbar -->
        <nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

          <!-- Sidebar Toggle (Topbar) -->
          <button id="sidebarToggleTop" class="btn btn-link d-md-none rounded-circle mr-3">
            <i class="fa fa-bars"></i>
          </button>
          <span><img src='img/logo.jpg' height="70px" width="150px"></span>
          <!-- Topbar Search 
    <form class="d-none d-sm-inline-block form-inline mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
      <div class="input-group">
        <input type="text" class="form-control bg-light border-0 small" placeholder="Search for..." aria-label="Search" aria-describedby="basic-addon2">
        <div class="input-group-append">
          <button class="btn btn-primary" type="button">
            <i class="fas fa-search fa-sm"></i>
          </button>
        </div>
      </div>
    </form>
        
    -->
          <!-- Topbar Navbar -->
          <ul class="navbar-nav ml-auto">

            <!-- Nav Item - Search Dropdown (Visible Only XS) -->



            <div class="topbar-divider d-none d-sm-block"></div>
            <?php $userinfo = getUserInfo('a', 'b'); ?>
            <!-- Nav Item - User Information -->
            <li class="nav-item dropdown no-arrow">
              <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="mr-2 d-none d-lg-inline text-gray-600 small">SYSTEM</span>
                <img class="img-profile rounded-circle" src="img/pro.png">
              </a>
              <!-- Dropdown - User Information -->
              <div class="dropdown-menu dropdown-menu-right  shadow animated--grow-in" aria-labelledby="userDropdown">
                <table class='table'>

                  <tr>
                    <td>Welcome</td>
                    <td></td>

                    <td>Admin,<?php echo  $userinfo['uid'];  ?></td>
                  </tr>

                  <tr>
                    <td>Designation</td>
                    <td></td>
                    <td><?php echo  $userinfo['role'];  ?></td>
                  </tr>
                  <tr>
                    <td>Department</td>
                    <td></td>
                    <td><?php echo  $userinfo['department'];  ?></td>
                  </tr>

                  <tr>
                    <td>Role</td>
                    <td></td>
                    <td><?php echo  $userinfo['role'];  ?></td>
                  </tr>

                </table>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item bg-primary text-white" href="#" data-toggle="modal" data-target="#logoutModal">
                  <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                  Logout
                </a>
              </div>
            </li>

          </ul>

        </nav>
        <!-- End of Topbar -->

        <!-- Begin Page Content -->
        <div class="container-fluid overflows">

          <!-- Page Heading -->
          <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
            <!--   GENERATE BUTTON 
              <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i class="fas fa-download fa-sm text-white-50"></i> Generate Report</a>
          -->
          </div>

          <!-- Content Row -->
          <div class="row">

            <!-- Earnings (Monthly) Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">Time</div>
                      <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo date('H.i.s'); ?></div>
                    </div>
                    <div class="col-auto">
                      <i class="fas fa-calendar fa-2x text-gray-300"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Earnings (Annual) Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-success text-uppercase mb-1">Date</div>
                      <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo date('dS F'); ?></div>
                    </div>
                    <!--
                    <div class="col-auto">
                      <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                    </div>
          -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Earnings (Monthly) Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Day</div>
                      <div class="row no-gutters align-items-center">
                        <div class="col-auto">
                          <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800"><?php echo date('l'); ?></div>
                        </div>
                        <div class="col">
                          <!--
                          <div class="progress progress-sm mr-2">
                            <div class="progress-bar bg-info" role="progressbar" style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"></div>
                          </div>
          -->
                        </div>
                      </div>
                    </div>
                    <!--
                    <div class="col-auto">
                      <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                    </div>
          -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Pending Requests Card Example -->
            <div class="col-xl-3 col-md-6 mb-4">
              <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                  <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                      <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Year</div>
                      <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo date('Y'); ?></div>
                    </div>
                    <!--
                    <div class="col-auto">
                      <i class="fas fa-comments fa-2x text-gray-300"></i>
                    </div>
          -->
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Content Row -->
          <?php for ($i = 0; $i < count($deviceId); $i++) { ?>
            <div class="row">

              <!-- Area Chart -->
              <div class="col-xl-8 col-lg-7">
                <div class="card shadow mb-4">
                  <!-- Card Header - Dropdown -->
                  <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><?php echo $deviceName[$i]; ?></h6>
                    <div class="dropdown no-arrow">
                      <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                      </a>
                      <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                        <div class="dropdown-header">Actions</div>
                        <a class="dropdown-item" href="#">Action</a>
                        <a class="dropdown-item" href="#">Another action</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#">Something else here</a>
                      </div>
                    </div>
                  </div>
                  <!-- Card Body -->
                  <?php
                  $totvalues = array();
                  $tottimes = array();
                  $newsql = "select parameter, pcode from device where uid='$deviceId[$i]'";
                  $totparaname = array();
                  $totpcodes = array();
                  $totresult = mysqli_query($connection, $newsql);
                  $totcounter = mysqli_num_rows($totresult);

                  $qe = 0;
                  while ($prows = mysqli_fetch_assoc($totresult)) {

                    $totparaname[$qe] = $prows['parameter'];


                    $totpcodes[$qe] = $prows['pcode'];


                    $qe++;
                  }

                  for ($ae = 0; $ae < $totcounter; $ae++) {

                    $totsqlv[$ae] = "SELECT value, time,date FROM livdev WHERE 
                        devid='$deviceId[$i]' and pcode ='$totpcodes[$ae]' 
                        order by utime desc limit 7";

                    // echo "<br> ".$totsqlv[$ae];
                    $totresultv[$ae] = mysqli_query($connection, $totsqlv[$ae]);
                    if (mysqli_num_rows($totresultv[$ae])) {
                      $valcounter = 0;
                      while ($tptrrs = mysqli_fetch_assoc($totresultv[$ae])) {

                        $totvalues[$ae][$valcounter] = $tptrrs['value'];

                        $tottimes[$ae][$valcounter] = $tptrrs['time'];
                        $valcounter++;
                      }
                    } else {
                      $totvalues[$ae] = 0;
                      $tottimes[$ae] = 0;
                    }
                  }



                  ?>
                  <script>
                    try {
                      var dataval = <?php echo json_encode($totvalues); ?>;
                      var timeval = <?php echo json_encode($tottimes); ?>;
                      var paramname = <?php echo json_encode($totparaname); ?>;
                      var colorsarray = <?php echo json_encode($colorsarray); ?>;

                      var totcounter = <?php echo $totcounter; ?>;
                      Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
                      Chart.defaults.global.defaultFontColor = '#858796';
                      var options = {
                        bezierCurve: false,
                        animation: {
                          //onComplete: done
                        }
                      };
                      var <?php echo "a" . $deviceId[$i]; ?> = {

                        labels: timeval[0].reverse(),

                        datasets: [
                          <?php for ($n = 0; $n < count($totparaname); $n++) {
                            echo '{
                                label: paramname[' . $n . '],
                                fill: false,
                                lineTension: 0.1	,
                                backgroundColor: colorsarray[' . $n . '],
                                borderColor: colorsarray[' . $n . '],
                                pointHoverBackgroundColor:colorsarray[' . $n . '],
                                pointHoverBorderColor: colorsarray[' . $n . '],
                                data: dataval[' . $n . '].reverse()
                          
                          
                              },';
                          }  ?>

                          //{
                          //  label: "range",
                          // }

                        ],

                      };



                    } catch (e) {
                      console.error(e, "this is caught");
                    }
                  </script>
                  <div class="card-body">
                    <div class="chart-area">
                      <canvas id="<?php echo $deviceId[$i] . 'gpl'; ?>"></canvas>
                    </div>
                  </div>
                </div>
              </div>
              <script src="vendor/jquery/jquery.min.js"></script>
              <script>
                try {
                  var ctx = <?php echo '$("#' . $deviceId[$i] . 'gpl")'; ?>

                  var LineGraph = new Chart(ctx, {
                    type: 'line',
                    data: <?php echo "a" . $deviceId[$i]; ?>,
                    options: {
                      title: {
                        display: true,
                        text: 'Parameter Values'
                      },

                      scales: {
                        yAxes: [{
                          scaleLabel: {
                            display: true,
                            labelString: 'Parameter Values'
                          }
                        }],

                        xAxes: [{
                          ticks: {
                            autoSkip: false,
                            maxRotation: 0,
                            minRotation: 0
                          }
                        }]
                      }



                    }
                  });
                } catch (e) {
                  console.error(e, "graph error");
                }
              </script>

              <!-- Pie Chart -->
              <div class="col-xl-4 col-lg-5">
                <div class="card shadow mb-4">
                  <!-- Card Header - Dropdown -->
                  <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-primary"><?php echo $deviceName[$i]; ?></h6>
                    <div class="dropdown no-arrow">
                      <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                      </a>
                      <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                        <div class="dropdown-header">Dropdown Header:</div>
                        <a class="dropdown-item" href="#">Action</a>
                        <a class="dropdown-item" href="#">Another action</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="#">Something else here</a>
                      </div>
                    </div>
                  </div>

                  <!-- Card Body -->


                  <div class="card-body">

                    <table class=' table'>




                      <tr>
                        <th>Parameter</th>
                        <th>Value</th>
                      </tr>
                      <?php

                      $psql = "select parameter, pcode,min,max from device where uid='$deviceId[$i]'";

                      $aresult = mysqli_query($connection, $psql);
                      $counter2 = mysqli_num_rows($aresult);
                      $q = 0;
                      while ($prow = mysqli_fetch_assoc($aresult)) {
                        $paraname[$q] = $prow['parameter'];
                        $pcodes[$q] = $prow['pcode'];
                        $maxx[$q] = $prow['max'];
                        $minn[$q] = $prow['min'];
                        $q++;
                      }
                      for ($e = 0; $e < $counter2; $e++) {
                        $sqlv[$e] = "select value,time,date from livdev where devid='$deviceId[$i]' and 
                                       pcode='$pcodes[$e]' order by date DESC ,time DESC LIMIT 1";

                        $resultv[$e] = mysqli_query($connection, $sqlv[$e]);
                      ?>
                      <?php

                        if (mysqli_num_rows($resultv[$e])) {

                          while ($rrs = mysqli_fetch_assoc($resultv[$e])) {

                            if ($rrs['value'] >= $maxx[$e]) {
                              echo "
									  <tr><td class='text-muted'><b>" . $paraname[$e] . "<b><br><small>(" . $rrs['date'] . "&nbsp; " . $rrs['time'] . ")</small>
						         </td><td><div class='text-danger values' id='$deviceId[$i]'" . "'apl'" . ">" . $rrs['value'] . "
								 </div></td></tr>";
                            } elseif ($rrs['value'] <= $minn[$e]) {
                              echo "<tr><td class='text-muted'><b>" . $paraname[$e] . "<b><br><small>(" . $rrs['date'] . "&nbsp; " . $rrs['time'] . ")</small>
						         </td><td><div class='text-info values' id='$deviceId[$i]'" . "'apl'" . ">" . $rrs['value'] . "
								 </div></td></tr>";
                            } else {

                              echo "<tr><td class='text-muted'><b>" . $paraname[$e] . "<b><br><small>(" . $rrs['date'] . "&nbsp; " . $rrs['time'] . ")</small>
						         </td><td><div class='text-muted values' id='$deviceId[$i]'" . "'apl'" . ">" . $rrs['value'] . "
								 </div></td></tr>";
                            }
                          }
                        } else
                          echo "<tr><td class='text-muted'>" . $paraname[$e] . "
						         </td><td><div class='text-muted values mycolor' id='$deviceId[$i]'" . "'apl'" . ">0
								 </div></td></tr>";
                      }    ?>
                    </table>


                  </div>
                </div>
              </div>
            </div>
          <?php } ?>



        </div>
        <!-- /.container-fluid -->

      </div>
      <!-- End of Main Content -->

      <!-- Footer -->
      <footer class="sticky-footer bg-white">
        <div class="container my-auto">
          <div class="copyright text-center my-auto">
            <span><a href="<?php echo geturlText(); ?>"> <?php echo getFooterText(); ?> </a></span>
          </div>
        </div>
      </footer>
      <!-- End of Footer -->

    </div>
    <!-- End of Content Wrapper -->

  </div>
  <!-- End of Page Wrapper -->

  <!-- Scroll to Top Button-->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>

  <!-- Logout Modal-->
  <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Confirm LOGOUT</h5>
          <button class="close" type="button" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">×</span>
          </button>
        </div>
        <div class="modal-body">Click logout to end current session</div>
        <div class="modal-footer">
          <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
          <a class="btn btn-primary" href="login.html">Logout</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap core JavaScript-->

  <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>


  <!-- Core plugin JavaScript-->
  <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

  <!-- Custom scripts for all pages-->
  <script src="js/sb-admin-2.min.js"></script>

  <!-- Page level plugins -->
  <script>
    $(window).on("load", function() {
      $("#loadingdiv").fadeOut("slow");
    });
  </script>
  <!-- Page level custom scripts -->


</body>

</html>"));//Generated by Ampare PHP Encoder. For more security please use php protect before encode the php program